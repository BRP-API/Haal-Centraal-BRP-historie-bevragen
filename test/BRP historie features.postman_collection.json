{
	"info": {
		"_postman_id": "de3dc647-c84b-4607-9f6a-0267ef3bf4cb",
		"name": "BRP historie features",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "verblijfplaathistorie",
			"item": [
				{
					"name": "mapping",
					"item": [
						{
							"name": "historische locatiebeschrijving en verblijfBuitenland",
							"event": [
								{
									"script": {
										"id": "bc561370-c126-4a0f-9873-35a8f70cb4e3",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"verblijfplaatshistorie Aantal\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"verblijfBuitenland Existtence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['verblijfBuitenland']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.land.code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['land']['code']).to.eql(\"8027\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.land.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['land']['omschrijving']).to.eql(\"Kiribati\");",
											"});",
											"",
											"pm.test(\"locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.eql('Woonboot \\\"\\'t Lelijk Eentje\\\"');",
											"});",
											"",
											"pm.test(\"[0].geheimhoudingPersoonsgegevens Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['geheimhoudingPersoonsgegevens']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
											"});",
											"",
											"pm.test(\"nummeraanduidingIdentificatie\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000316239\");",
											"});",
											"",
											"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresseerbaarObjectIdentificatie']).to.eql(\"0599010000287986\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"nummeraanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['_links']['adres']['href']).to.match(/^.*\\/adressen\\/0599200000316239$/);",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"adresseerbaarObject\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['_links']['adresseerbaarObject']['href']).to.match(/^.*\\/adresseerbareobjecten\\/0599010000287986$/);",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "6d647678-76a7-4e96-97cb-a30e833fa48f",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "huisnummertoevoeging",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test.skip(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(\"https://www.haalcentraal.nl/haalcentraal/api/brp/ingeschrevenpersonen/999990160/verblijfplaatshistorie\");",
											"});",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"verblijfplaatshistorie Aantal\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"gemeenteVanInschrijving.code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['gemeenteVanInschrijving']['code']).to.eql(\"0344\");",
											"});",
											"",
											"pm.test(\"datumInschrijvingInGemeente\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumInschrijvingInGemeente']).to.eql({   \"datum\" : \"1975-01-01\",   \"jaar\" : 1975,   \"maand\" : 1,   \"dag\" : 1});",
											"});",
											"",
											"pm.test(\"functieAdres\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['functieAdres']).to.eql(\"woonadres\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']).to.eql({   \"datum\" : \"1975-01-01\",   \"jaar\" : 1975,   \"maand\" : 1,   \"dag\" : 1});",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.eql(\"St. Jacobsstraat\");",
											"});",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"St. Jacobsstraat\");",
											"});",
											"",
											"pm.test(\"huisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['huisnummer']).to.eql(400);",
											"});",
											"",
											"pm.test(\"huisletter\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['huisletter']).to.eql(\"L\");",
											"});",
											"",
											"pm.test(\"huisnummertoevoeging\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['huisnummertoevoeging']).to.eql(\"Toe\");",
											"});",
											"",
											"pm.test(\"postcode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['postcode']).to.eql(\"3511BT\");",
											"});",
											"",
											"pm.test(\"woonplaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Utrecht\");",
											"});",
											"",
											"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresseerbaarObjectIdentificatie']).to.eql(\"0344010020400001\");",
											"});",
											"",
											"pm.test(\"nummeraanduidingIdentificatie\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.eql(\"0344200020400001\");",
											"});",
											"",
											"pm.test.skip(\"landVanwaarIngeschreven.code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['landVanwaarIngeschreven']['code']).to.eql(\"5003\");",
											"});",
											"",
											"pm.test(\"datumVestigingInNederland\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumVestigingInNederland']).to.eql({   \"datum\" : \"1975-01-01\",   \"jaar\" : 1975,   \"maand\" : 1,   \"dag\" : 1});",
											"});",
											"",
											"pm.test(\"indicatieVestigingVanuitBuitenland\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['indicatieVestigingVanuitBuitenland']).to.eql(true);",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']).to.eql({   \"datum\" : \"2011-10-24\",   \"jaar\" : 2011,   \"maand\" : 10,   \"dag\" : 24});",
											"});",
											""
										],
										"id": "2fa94ea2-5f3b-45f1-b016-28ea9b5e4f8e"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ada7e5f6-6bcb-4fe9-abc3-85d520fd63f0",
											"key": "burgerservicenummer",
											"value": "999990160",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "AanduidingBijHuisnummer to",
							"event": [
								{
									"script": {
										"id": "398bc633-7cf4-4fc7-ad1b-580917f96f75",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"1e Exloërmond\");",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"1e Exloërmond\");",
											"});",
											"",
											"pm.test(\"huisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummer']).to.eql(3);",
											"});",
											"",
											"pm.test(\"huisletter Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisletter']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"huisnummertoevoeging Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummertoevoeging']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"aanduidingBijHuisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['aanduidingBijHuisnummer']).to.eql(\"tegenover\");",
											"});",
											"",
											"pm.test(\"postcode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.eql(\"9573PA\");",
											"});",
											"",
											"pm.test(\"woonplaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Borger-Odoorn\");",
											"});",
											"",
											"pm.test.skip(\"woonplaats Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"adresseerbaarObjectIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresseerbaarObjectIdentificatie']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"nummeraanduidingIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "eecb5dfd-cb01-4443-bd74-8db41a61abff",
											"key": "burgerservicenummer",
											"value": "999990482",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "locatiebeschrijving",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"gemeenteVanInschrijving.code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['gemeenteVanInschrijving']['code']).to.eql(\"0599\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"'s-Gravenhage\");",
											"});",
											"",
											"pm.test(\"datumInschrijvingInGemeente\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumInschrijvingInGemeente']).to.eql({   \"datum\" : \"1989-03-01\",   \"jaar\" : 1989,   \"maand\" : 3,   \"dag\" : 1});",
											"});",
											"",
											"pm.test(\"functieAdres\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['functieAdres']).to.eql(\"woonadres\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']).to.eql({   \"datum\" : \"2000-03-10\",   \"jaar\" : 2000,   \"maand\" : 3,   \"dag\" : 10});",
											"});",
											"",
											"pm.test(\"korteNaam Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"straat Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"huisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummer']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"huisletter Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisletter']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"huisnummertoevoeging Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummertoevoeging\t']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"aanduidingBijHuisnummer Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['aanduidingBijHuisnummer']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"postcode Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"woonplaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"adresseerbaarObjectIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresseerbaarObjectIdentificatie']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"nummeraanduidingIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['locatiebeschrijving']).to.eql(\"Woonboot in de Grote Sloot\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['verblijfBuitenland']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].[woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"'s-Gravenhage\");",
											"});",
											"",
											"pm.test(\"[1].[woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['woonplaats']).to.eql(\"Rotterdam\");",
											"});",
											"",
											"pm.test(\"[3].[woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['woonplaats']).to.eql(\"het Bildt\");",
											"});",
											""
										],
										"id": "24a47aec-cdb0-4168-bd30-e7d661db6b38"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "647d4715-da53-4eea-a4ae-88b50c6db97e",
											"key": "burgerservicenummer",
											"value": "000009921",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "BAG identificatie onbekend",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Zomerdijkstrtaat\");",
											"});",
											"",
											"pm.test.skip(\"straat Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"huisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummer']).to.eql(17);",
											"});",
											"",
											"pm.test(\"postcode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.eql(\"1079WZ\");",
											"});",
											"",
											"pm.test(\"woonplaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Amsterdam\");",
											"});",
											"",
											"pm.test(\"adresseerbaarObjectIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresseerbaarObjectIdentificatie']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"nummeraanduidingIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Zomerdijkstrtaat\");",
											"});",
											""
										],
										"id": "93a857f8-d5bb-4916-94d5-0812e632d2da"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "7084a662-a131-49de-8b94-ad5bd3cdcf02",
											"key": "burgerservicenummer",
											"value": "999991802",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "vanuitVertrokkenOnbekendWaarheen",
							"event": [
								{
									"script": {
										"id": "309c6fbe-3ad4-40b9-94ad-68186b0bfc3f",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test.skip(\"vanuitVertrokkenOnbekendWaarheen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['vanuitVertrokkenOnbekendWaarheen']).to.eql(true);",
											"});",
											"",
											"pm.test(\"landVanwaarIngeschreven Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['landVanwaarIngeschreven']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"vertrokkenOnbekendWaarheen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['vertrokkenOnbekendWaarheen']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "674293aa-9b62-4423-9186-2cffc3bae8c4",
											"key": "burgerservicenummer",
											"value": "999995121",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "VertrokkenOnbekendWaarheen",
							"event": [
								{
									"script": {
										"id": "d6d5f353-8aff-4270-a2c0-1d6b61901424",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"vertrokkenOnbekendWaarheen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['vertrokkenOnbekendWaarheen']).to.eql(true);",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.land Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['land']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.adresRegeld1 Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresRegel1']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.adresRegeld2 Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresRegel2']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.adresRegeld3 Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresRegel3']).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "e8cfe8bc-b9d5-4782-9dec-19c6591ce32f",
											"key": "burgerservicenummer",
											"value": "999993586",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "verblijfplaats datums",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"datumInschrijvingInGemeente\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumInschrijvingInGemeente']).to.eql({   \"datum\" : \"1991-02-01\",   \"jaar\" : 1991,   \"maand\" : 2,   \"dag\" : 1});",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']).to.eql({   \"datum\" : \"1991-02-01\",   \"jaar\" : 1991,   \"maand\" : 2,   \"dag\" : 1});",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumIngangGeldigheid']).to.eql({   \"datum\" : \"1991-02-01\",   \"jaar\" : 1991,   \"maand\" : 2,   \"dag\" : 1});",
											"});",
											""
										],
										"id": "4b4e521b-78c0-4a56-b2ee-8fa9c01d27c9"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "df757550-d763-49a9-8699-2f8d8f26289d",
											"key": "burgerservicenummer",
											"value": "999993872",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "inOnderzoek: Hele categorie Verblijfplaats (080000)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"inOnderzoek\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['inOnderzoek']).to.eql({   \"functieAdres\" : true,   \"nummeraanduidingIdentificatie\" : true,   \"adresseerbaarObjectIdentificatie\" : true,   \"locatiebeschrijving\" : true,   \"woonplaats\" : true,   \"huisnummertoevoeging\" : true,   \"datumAanvangAdreshouding\" : true,   \"straat\" : true,   \"postcode\" : true,   \"datumInschrijvingInGemeente\" : true,   \"korteNaam\" : true,   \"verblijfBuitenland\" : true,   \"landVanWaarIngeschreven\" : true,   \"datumIngangGeldigheid\" : true,   \"huisletter\" : true,   \"datumVestigingInNederland\" : true,   \"huisnummer\" : true,   \"aanduidingBijHuisnummer\" : true,   \"gemeenteVanInschrijving\" : true,   \"datumIngangOnderzoek\" : {      \"datum\" : \"1994-09-30\",      \"jaar\" : 1994,      \"maand\" : 9,      \"dag\" : 30   }});",
											"});"
										],
										"id": "c6e488b4-88e8-4cfa-a6aa-dcd4512416fc"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "78969b19-b8a6-4461-87df-144a85bb952b",
											"key": "burgerservicenummer",
											"value": "999990561",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "inOnderzoek: Hele groep Adres (081100)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"inOnderzoek\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['inOnderzoek']).to.eql({   \"nummeraanduidingIdentificatie\" : true,   \"adresseerbaarObjectIdentificatie\" : true,   \"woonplaats\" : true,   \"huisnummertoevoeging\" : true,   \"straat\" : true,   \"postcode\" : true,   \"korteNaam\" : true,   \"huisletter\" : true,   \"huisnummer\" : true,   \"aanduidingBijHuisnummer\" : true,   \"datumIngangOnderzoek\" : {      \"datum\" : \"2010-01-04\",      \"jaar\" : 2010,      \"maand\" : 1,      \"dag\" : 4   }});",
											"});"
										],
										"id": "4a459786-9c77-48dd-ad63-0a907569764a"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "92d38a27-484f-434f-a29b-a2858191f89c",
											"key": "burgerservicenummer",
											"value": "999995091",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "inOnderzoek: Onderzoek verblijfplaats beëindigd",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['inOnderzoek']).to.be.an(\"undefined\");",
											"});"
										],
										"id": "2b5f7de8-b951-433b-b03c-49c5038ef909"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "f1c24ea9-eb8d-4f8d-b9d1-c61a3c6a71a2",
											"key": "burgerservicenummer",
											"value": "999992831",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "inOnderzoek beëindigd in historische verblijfplaats",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['inOnderzoek']).to.be.an(\"undefined\");",
											"});"
										],
										"id": "5245c9a5-aced-4d62-b41f-947f448fa100"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "b84162c8-683f-4189-baf4-3267a073108b",
											"key": "burgerservicenummer",
											"value": "999990263",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "AanduidingBijHuisnummer by",
							"event": [
								{
									"script": {
										"id": "76592c52-0bb4-4183-9b93-28976a1b8cc5",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Graan voor Visch\");",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Graan voor Visch\");",
											"});",
											"",
											"pm.test(\"huisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummer']).to.eql(15201);",
											"});",
											"",
											"pm.test(\"huisletter Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisletter']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"huisnummertoevoeging Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummertoevoeging']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"aanduidingBijHuisnummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['aanduidingBijHuisnummer']).to.eql(\"bij\");",
											"});",
											"",
											"pm.test(\"postcode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.eql(\"2132EA\");",
											"});",
											"",
											"pm.test(\"woonplaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Haarlemmermeer\");",
											"});",
											"",
											"pm.test.skip(\"woonplaats Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"IdentificatiecodeVerblijfplaats Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['identificatiecodeVerblijfplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"nummeraanduidingIdentificatie Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"locatiebeschrijving Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['locatiebeschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland Existtence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['verblijfBuitenland']).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "6981c10b-85da-4f57-b1e8-fdce68fc9f82",
											"key": "burgerservicenummer",
											"value": "999990913",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "inOnderzoek lopend in historische verblijfplaats",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"inOnderzoek\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['inOnderzoek']).to.eql({   \"functieAdres\" : true,   \"nummeraanduidingIdentificatie\" : true,   \"adresseerbaarObjectIdentificatie\" : true,   \"locatiebeschrijving\" : true,   \"woonplaats\" : true,   \"huisnummertoevoeging\" : true,   \"datumAanvangAdreshouding\" : true,   \"straat\" : true,   \"postcode\" : true,   \"datumInschrijvingInGemeente\" : true,   \"korteNaam\" : true,   \"verblijfBuitenland\" : true,   \"landVanWaarIngeschreven\" : true,   \"datumIngangGeldigheid\" : true,   \"huisletter\" : true,   \"datumVestigingInNederland\" : true,   \"huisnummer\" : true,   \"aanduidingBijHuisnummer\" : true,   \"gemeenteVanInschrijving\" : true,   \"datumIngangOnderzoek\" : {      \"datum\" : \"1994-03-11\",      \"jaar\" : 1994,      \"maand\" : 3,      \"dag\" : 11   }});",
											"});"
										],
										"id": "0b16b14d-3bf7-49ad-a93e-3ecf1c4b3fec"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "f0fc1ab8-e0d1-42f4-b1de-768bc4c0f37c",
											"key": "burgerservicenummer",
											"value": "999990378",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "indicatie geheim",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"[0].geheimhoudingPersoonsgegevens\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['geheimhoudingPersoonsgegevens']).to.eql(true);",
											"});",
											"",
											"pm.test(\"[1].geheimhoudingPersoonsgegevens\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['geheimhoudingPersoonsgegevens']).to.eql(true);",
											"});",
											"",
											"pm.test(\"[2].geheimhoudingPersoonsgegevens\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['geheimhoudingPersoonsgegevens']).to.eql(true);",
											"});",
											""
										],
										"id": "e760d9ca-3485-42d6-8258-c226a03af483"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5e16fa1f-e4c2-44f6-8fb1-764857dc2ecb",
											"key": "burgerservicenummer",
											"value": "999992715",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"description": "controleert dat gegevens uit de bron op de juiste plek (properties) en in de juiste vorm in de response komt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a944dfda-8c43-4351-950c-ce52377c180b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4c65e9c-4498-4927-a764-37ef93eab70a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "historie",
					"item": [
						{
							"name": "alleen een actuele verblijfplaats",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding.datum).to.eql(\"1988-01-15\");",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].korteNaam).to.eql(\"Fluitenbergstraat\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "691baec2-a40f-401d-b21d-a2c4bdf42467",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "meerdere verhuizingen en actueel adres buitenland",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(5);",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding.datum).to.eql(\"2014-07-02\");",
											"});",
											"",
											"pm.test.skip(\"[0].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"[0].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumIngangGeldigheid.datum).to.eql(\"2014-07-02\");",
											"});",
											"",
											"pm.test(\"[0].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].verblijfBuitenland\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].adresregel1).to.eql(\"Rue du pomme 25\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumAanvangAdreshouding.datum).to.eql(\"2012-03-05\");",
											"});",
											"",
											"pm.test.skip(\"[1].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumIngangGeldigheid.datum).to.eql(\"2012-03-05\");",
											"});",
											"",
											"pm.test(\"[1].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot.datum).to.eql(\"2014-07-02\");",
											"});",
											"",
											"pm.test(\"[1].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].korteNaam).to.eql(\"Burgemeester Röellstr\");",
											"});",
											"",
											"pm.test(\"Match content of [straat]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['straat']).to.eql(\"Burgemeester Röellstraat\");",
											"});",
											"",
											"pm.test(\"[2].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumAanvangAdreshouding.datum).to.eql(\"1992-01-05\");",
											"});",
											"",
											"pm.test.skip(\"[2].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumIngangGeldigheid.datum).to.eql(\"1992-01-05\");",
											"});",
											"",
											"pm.test(\"[2].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumTot.datum).to.eql(\"2012-03-05\");",
											"});",
											"",
											"pm.test(\"[2].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].korteNaam).to.eql(\"Zonegge\");",
											"});",
											"",
											"pm.test(\"[3].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].datumAanvangAdreshouding.datum).to.eql(\"1984-06-15\");",
											"});",
											"",
											"pm.test.skip(\"[3].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].datumIngangGeldigheid.datum).to.eql(\"1984-06-15\");",
											"});",
											"",
											"pm.test(\"[3].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].datumTot.datum).to.eql(\"1992-01-05\");",
											"});",
											"",
											"pm.test(\"[3].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].korteNaam).to.eql(\"Zonnebloemstraat\");",
											"});",
											"",
											"pm.test(\"[4].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[4].datumAanvangAdreshouding.datum).to.eql(\"1965-06-12\");",
											"});",
											"",
											"pm.test.skip(\"[4].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[4].datumIngangGeldigheid.datum).to.eql(\"1965-06-12\");",
											"});",
											"",
											"pm.test(\"[4].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[4].datumTot.datum).to.eql(\"1984-06-15\");",
											"});",
											"",
											"pm.test(\"[4].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[4].korteNaam).to.eql(\"Eerste Anjeliersdwstr\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "0a345938-95c8-4e6b-a2ef-cffbc6d29b18",
											"key": "burgerservicenummer",
											"value": "999993483",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "adrescorrectie",
							"event": [
								{
									"script": {
										"id": "57f90e47-9270-4fa4-9595-b4b539240d05",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding.datum).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test.skip(\"[0].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumIngangGeldigheid.datum).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].korteNaam).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test(\"[0].straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].straat).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test(\"[0].adresseerbaarObjectIdentificatie\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].adresseerbaarObjectIdentificatie).to.eql(\"0599010000287986\");",
											"});",
											"",
											"pm.test(\"[0].nummeraanduidingIdentificatie\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].nummeraanduidingIdentificatie).to.eql(\"0599200000316239\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumAanvangAdreshouding.datum).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test.skip(\"[1].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumIngangGeldigheid.datum).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[1].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot.datum).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].locatiebeschrijving).to.eql('Woonboot \"\\'t Lelijk Eentje\"');",
											"});",
											"",
											"pm.test.skip(\"[2].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumAanvangAdreshouding).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumAanvangAdreshouding.datum).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test.skip(\"[2].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumIngangGeldigheid.datum).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"[2].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumTot.datum).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[2].verblijfBuitenland.land\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].land.code).to.eql(\"8027\");",
											"});",
											"",
											"pm.test(\"[3].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].datumAanvangAdreshouding.datum).to.eql(\"1961-12-30\");",
											"});",
											"",
											"pm.test.skip(\"[3].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].datumIngangGeldigheid.datum).to.eql(\"1961-12-30\");",
											"});",
											"",
											"pm.test(\"[3].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].datumTot.datum).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"[3].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[3].korteNaam).to.eql(\"Curaçaolaan\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "b5de5fb5-cf09-4466-bca1-b00d41f048c8",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "adrescorrectie zonder andere adreshistorie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "eb4d3ce5-1098-4121-a36e-965524fbabdd",
											"key": "burgerservicenummer",
											"value": "999995121",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "onbekende en ontbrekende datumAanvangAdreshouding",
							"event": [
								{
									"script": {
										"id": "e487b716-6361-4d66-b7b8-3f03492ba71a",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding.datum Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding.datum).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding.jaar\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding.jaar).to.eql(1996);",
											"});",
											"",
											"pm.test(\"[0].datumIngangGeldigheid Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumIngangGeldigheid).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].verblijfBuitenland.land\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].land.code).to.eql(\"6039\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumAanvangAdreshouding).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumIngangGeldigheid Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumIngangGeldigheid).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumTot.datum Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot.datum).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumTot.jaar\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot.jaar).to.eql(1996);",
											"});",
											"",
											"pm.test(\"[1].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].korteNaam).to.eql(\"Leyweg\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "0801f393-990b-4f5c-8624-2360b6feed98",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datum aanvang adreshouding ontbreekt",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"1e Exloërmond\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [locatiebeschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.eql(\"1e Exloermond t/o de molen\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"1998-01-01\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5c78729d-d7f6-4784-a6d0-d9ed89a9c60d",
											"key": "burgerservicenummer",
											"value": "999990482",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "peildatum",
					"item": [
						{
							"name": "peildatum",
							"event": [
								{
									"script": {
										"id": "20bb6ad5-71fc-4bb9-aefa-e98d5535a8ad",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['locatiebeschrijving']).to.eql(\"Woonboot \\\"'t Lelijk Eentje\\\"\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumTot']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-09-10\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1993-11-05",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1993-11-05",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "473fcf9b-e9cd-4ed6-888c-56decdf84f18",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum=datumAanvangAdreshouding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].straat).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1994-05-08",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1994-05-08",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "d625aff2-5357-4ded-8b83-4e3a4eb68458",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum=datumAanvangAdreshouding verblijf buitenland",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.land\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].land.code).to.eql(\"8027\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1993-02-15",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1993-02-15",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "124126f4-647d-404f-8a53-1607fdf8b39c",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum voor eerste inschrijving",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1961-12-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1961-12-29",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "b4e0d786-8d1f-4819-b9e1-66c7f59e72d5",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum voor adrescorrectie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1994-05-10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1994-05-10",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "6238a986-7718-4e0c-b1ee-07451bb81e37",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum na adrescorrectie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=2011-02-06",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2011-02-06",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "d7d1965f-a250-4abb-8797-f0f069f1db80",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum voor buitenlands adres",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Curaçaolaan\");",
											"});",
											"",
											"pm.test(\"datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumTot']['datum']).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1961-12-30\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1962-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1962-01-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "f6157792-18a9-48a4-ab41-dd4571a57c7c",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum bij onbekende datum aanvang adreshouding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Leyweg\");",
											"});",
											"",
											"pm.test(\"datumTot.jaar\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot.jaar).to.eql(1996);",
											"});",
											"",
											"pm.test(\"datumTot.datum Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot.datum).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1995-12-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1995-12-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "bb11b26f-e68f-458e-9410-73d608a245ad",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum bij ontbrekende datum aanvang adreshouding wel ingang geldigheid",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.adresRegel1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresregel1']).to.eql(\"89 Woodcote Road\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['jaar']).to.eql(1996);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1997-01-15",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1997-01-15",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "a385fb9d-0404-49cf-991d-578c9bf3f36b",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum bij ontbrekende datum aanvang adreshouding en ingang geldigheid alleen jaar",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.adresRegel1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresregel1']).to.eql(\"89 Woodcote Road\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']).to.eql({\n   \"jaar\" : 1996\n});",
											"});",
											"",
											"pm.test(\"[1].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.eql(\"Leyweg\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1996-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1996-01-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "1fd17099-c38b-4e0b-b31e-61b5194faab6",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum bij ontbrekende datum aanvang adreshouding en ingang geldigheid alleen jaar (2)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.adresRegel1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresregel1']).to.eql(\"89 Woodcote Road\");",
											"});",
											"",
											"pm.test.skip(\"datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']).to.eql({\n   \"jaar\" : 1996\n});",
											"});",
											"",
											"pm.test(\"[1].korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.eql(\"Leyweg\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?peildatum=1996-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1996-12-31",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5846e0b3-cd90-4a3c-82d8-105f85d7058f",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "periode van en tot",
					"item": [
						{
							"name": "periode over meedere adressen",
							"event": [
								{
									"script": {
										"id": "eaf63568-e73a-499a-8145-56dfa2b86dbd",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"[0].straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"[0].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.eql('Woonboot \"\\'t Lelijk Eentje\"');",
											"});",
											"",
											"pm.test.skip(\"[1].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumIngangGeldigheid']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[1].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumTot']['datum']).to.eql(\"1994-05-08\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1993-11-05&datumTotEnMet=1994-07-03",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1993-11-05",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1994-07-03",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "bbce01ad-47aa-4c04-8730-da1b4195d41b",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumVan=datumAanvangAdreshouding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"[0].straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"[0].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1994-05-08&datumTotEnMet=2014-05-08",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1994-05-08",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2014-05-08",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "6c6e2b6d-5667-4848-978a-ce48d001aa76",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumTotEnMet=datumAanvangAdreshouding",
							"event": [
								{
									"script": {
										"id": "4811f759-37d8-4107-95f5-e2dbb83f5bda",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"[0].straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"[0].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.eql('Woonboot \"\\'t Lelijk Eentje\"');",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[1].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumTot']['datum']).to.eql(\"1994-05-08\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1992-05-08&datumTotEnMet=1994-05-08",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1992-05-08",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1994-05-08",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "c253a10d-f094-4632-a07f-eb1680d0056b",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumTotEnMet=datumAanvangAdreshouding 2",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1961-12-30\");",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Curaçaolaan\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1961-01-01&datumTotEnMet=1961-12-30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1961-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1961-12-30",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "156b505d-70b6-4726-b077-f609ed5b6deb",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumTotEnMet=dag voor datumAanvangAdreshouding",
							"event": [
								{
									"script": {
										"id": "5821c422-3660-4550-8c94-9f75f9b97a11",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"[0].locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['locatiebeschrijving']).to.eql('Woonboot \"\\'t Lelijk Eentje\"');",
											"});",
											"",
											"pm.test.skip(\"[0].datumIngangGeldigheid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"[0].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumTot']['datum']).to.eql(\"1994-05-08\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1992-05-08&datumTotEnMet=1994-05-07",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1992-05-08",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1994-05-07",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "a07cbeca-8b26-4287-886d-e6db9f03b330",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode voor eerste inschrijving",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1961-01-01&datumTotEnMet=1961-12-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1961-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1961-12-29",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "f1bff692-9cef-4652-b340-af2a6e7569bd",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode tot en met dag eerste inschrijving",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"korteNaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Curaçaolaan\");",
											"});",
											"",
											"pm.test(\"datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumTot']['datum']).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1961-12-30\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1961-01-01&datumTotEnMet=1961-12-30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1961-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1961-12-30",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "00422817-1520-468d-a039-bbaf89c0eba0",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode voor adrescorrectie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Match content of [straat]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumIngangGeldigheid']['datum']).to.eql(\"2011-02-05\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000316239\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=2008-01-01&datumTotEnMet=2008-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2008-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2008-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "96e1530f-b00c-4037-a91c-cb3f2e62973b",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode na adrescorrectie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Match content of [straat]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=2011-02-06&datumTotEnMet=2011-06-30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2011-02-06",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2011-06-30",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "f3d6ba59-26a7-40f3-b9ec-61cecb260726",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode bij onbekende datum aanvang adreshouding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Leyweg\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1995-01-01&datumTotEnMet=1995-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1995-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1995-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "d380094f-85e0-494e-bbc9-5983fcafb2ad",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode in buitenlands adres met alleen aanvang jaar",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [adresRegel1]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresregel1']).to.eql(\"89 Woodcote Road\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['jaar']).to.eql(1996);",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.eql(\"Leyweg\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1996-01-01&datumTotEnMet=1996-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1996-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1996-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "243d3a9a-e9ec-476f-8b69-92ce3967bf02",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode bij ingang geldigheid alleen jaar",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['jaar']).to.eql(1996);",
											"});",
											"",
											"pm.test(\"Match content of [adresRegel1]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['adresregel1']).to.eql(\"89 Woodcote Road\");",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.eql(\"Leyweg\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1995-07-01&datumTotEnMet=1996-06-30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1995-07-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1996-06-30",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "09067570-240b-43c7-ad91-028160052bb0",
											"key": "burgerservicenummer",
											"value": "999992338",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "alleen periodevan",
							"event": [
								{
									"script": {
										"id": "4c41e6ab-7d11-4f65-a91f-8ba4d003a7cc",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"[0].straat\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['straat']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.eql(\"Woonboot \\\"'t Lelijk Eentje\\\"\");",
											"});",
											"",
											"pm.test(\"[1].datumTot\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumTot']['datum']).to.eql(\"1994-05-08\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumVan=1993-11-05",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1993-11-05",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5ed9c1b4-8c7d-4756-8888-19d78d656df0",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "alleen periodetot",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [land][code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['land']['code']).to.eql(\"8027\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumTot']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.eql(\"Curaçaolaan\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumTot']['datum']).to.eql(\"1993-02-15\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?datumTotEnMet=1993-04-05",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "1993-04-05",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "b699f250-00eb-4ab4-b9f3-17d067390375",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "fields",
					"item": [
						{
							"name": "losse velden",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/999994669/verblijfplaatshistorie?fields=korteNaam,huisnummer,postcode\");",
											"});",
											"",
											"pm.test(\"Match content of [huisnummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['huisnummer']).to.eql(4);",
											"});",
											"",
											"pm.test(\"Match content of [postcode]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.eql(\"3078JG\");",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['korteNaam']).to.eql(\"Johan in 't Veltstraat\");",
											"});",
											"",
											"pm.test(\"Match content of [huisnummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['huisnummer']).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [postcode]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['postcode']).to.eql(\"1213VK\");",
											"});",
											"",
											"pm.test(\"Match content of [korteNaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['korteNaam']).to.eql(\"Curaçaolaan\");",
											"});",
											"",
											"pm.test(\"[1].postcode Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['postcode']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].verblijfBuitenland Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['verblijfBuitenland']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumAanvangAdreshouding).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumAanvangAdreshouding).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumAanvangAdreshouding).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumTot).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?fields=korteNaam,huisnummer,postcode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "korteNaam,huisnummer,postcode",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "6315d41b-a3e9-498a-a335-8c4126a79a2e",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "hele groep",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/999994669/verblijfplaatshistorie?fields=datumAanvangAdreshouding,gemeenteVanInschrijving\");",
											"});",
											"",
											"pm.test(\"[0].postcode Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].verblijfBuitenland Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['verblijfBuitenland']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['code']).to.eql(\"0599\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"Rotterdam\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['jaar']).to.eql(1994);",
											"});",
											"",
											"pm.test(\"Match content of [maand]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['maand']).to.eql(5);",
											"});",
											"",
											"pm.test(\"Match content of [dag]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['dag']).to.eql(8);",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['gemeenteVanInschrijving']['code']).to.eql(\"0402\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"Hilversum\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']['jaar']).to.eql(1993);",
											"});",
											"",
											"pm.test(\"Match content of [maand]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']['maand']).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [dag]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']['dag']).to.eql(15);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?fields=datumAanvangAdreshouding,gemeenteVanInschrijving",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "datumAanvangAdreshouding,gemeenteVanInschrijving",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "907d6e22-8043-4ac4-a5f7-a89e30ff77cd",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "velden in groep",
							"event": [
								{
									"script": {
										"id": "807a77f5-8bb8-4f60-a6f7-b2c8f96310a5",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/999994669/verblijfplaatshistorie?fields=land.omschrijving,datumAanvangAdreshouding.datum\");",
											"});",
											"",
											"pm.test(\"[0].postcode Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['datum']).to.eql(\"1994-05-08\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-09-10\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']['datum']).to.eql(\"1993-02-15\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['datumAanvangAdreshouding']['datum']).to.eql(\"1961-12-30\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding.jaar Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']['jaar']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding.jaar Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']['jaar']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumAanvangAdreshouding.jaar Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']['jaar']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].verblijfBuitenland.land.code Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['land']['code']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.land.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['land']['omschrijving']).to.eql(\"Kiribati\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?fields=land.omschrijving,datumAanvangAdreshouding.datum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "land.omschrijving,datumAanvangAdreshouding.datum",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "4fad57b6-4170-4f06-a100-409e5c0f7e06",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "velden in groep (2)",
							"event": [
								{
									"script": {
										"id": "8951487f-52ae-4e77-8a13-a2d64d9d2429",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"/*",
											"    TODO: validate response to schema",
											"*/",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/999994669/verblijfplaatshistorie?fields=land.code\");",
											"});",
											"",
											"pm.test(\"[0].postcode Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['postcode']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].locatiebeschrijving Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['locatiebeschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].korteNaam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['korteNaam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[0].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[1].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumTot Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfplaatshistorie[2].datumTot).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['datumAanvangAdreshouding']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['datumAanvangAdreshouding']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].datumAanvangAdreshouding Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['datumAanvangAdreshouding']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[2].land.omschrijving Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['land']['omschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"verblijfBuitenland.land.code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['land']['code']).to.eql(\"8027\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie?fields=land.code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "land.code",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "d196b0d1-eee9-42e2-be2e-853f41eaa508",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "foutafhandeling",
					"item": [
						{
							"name": "burgerservicenummer niet gevonden",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});",
											"",
											"pm.test.skip(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(404);",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/verblijfplaatshistorie\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ddbe0846-7027-4473-a15b-7dc70737d694",
											"key": "burgerservicenummer",
											"value": "123456789",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "burgerservicenummer te kort",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test.skip(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Match content of [type]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['type']).to.eql(\"https://docs.microsoft.com/en-us/dotnet/api/system.net.httpstatuscode?#System_Net_HttpStatusCode_BadRequest\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(400);",
											"});",
											"",
											"pm.test(\"Match content of [detail]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['detail']).to.eql(\"De foutieve parameter(s) zijn: burgerservicenummer.\");",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/verblijfplaatshistorie\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
											"});",
											"",
											"pm.test(\"Match content of [name]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"burgerservicenummer\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minLength\");",
											"});",
											"",
											"pm.test(\"Match content of [reason]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is korter dan minimale lengte 9.\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "c6a65d0d-2a8c-4054-83c6-cc3772b4e96c",
											"key": "burgerservicenummer",
											"value": "12345678",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "burgerservicenummer te lang",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test.skip(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Match content of [type]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['type']).to.eql(\"https://docs.microsoft.com/en-us/dotnet/api/system.net.httpstatuscode?#System_Net_HttpStatusCode_BadRequest\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(400);",
											"});",
											"",
											"pm.test(\"Match content of [detail]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['detail']).to.eql(\"De foutieve parameter(s) zijn: burgerservicenummer.\");",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/verblijfplaatshistorie\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
											"});",
											"",
											"pm.test(\"Match content of [name]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"burgerservicenummer\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maxLength\");",
											"});",
											"",
											"pm.test(\"Match content of [reason]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is langer dan maximale lengte 9.\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "bd6ba507-db5c-4ac5-a0ac-43b9f21a471b",
											"key": "burgerservicenummer",
											"value": "1234567890",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "feature: woonplaats",
					"item": [
						{
							"name": "woonplaats gevuld (ongelijk aan gemeente inschrijving)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"Langedijk\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Scharwoude\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "c63844a6-d57d-4d1f-b664-de196bceec62",
											"key": "burgerservicenummer",
											"value": "999992934",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "woonplaats leeg, korteNaam gevuld",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"Borger-Odoorn\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Borger-Odoorn\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "75372695-2518-4bc2-8a96-540a80ddbb3c",
											"key": "burgerservicenummer",
											"value": "999990482",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "locatiebeschrijving",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"'s-Gravenhage\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"'s-Gravenhage\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving] (2)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"Rotterdam\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (2)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['woonplaats']).to.eql(\"Rotterdam\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving] (3)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"het Bildt\");",
											"});",
											"",
											"pm.test(\"woonplaats Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving] (4)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"het Bildt\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (4)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['woonplaats']).to.eql(\"het Bildt\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (7)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][6]['woonplaats']).to.eql(\"Idaarderadeel\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5af2b618-d05d-40b3-9753-e4ff82df0450",
											"key": "burgerservicenummer",
											"value": "000009921",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "historische locatiebeschrijving",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (1: actueel BAG adres)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Rotterdam\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (2: locatiebeschrijving)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['woonplaats']).to.eql(\"Rotterdam\");",
											"});",
											"",
											"pm.test(\"woonplaats Existence Match (3: verblijf buitenland)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (4: historisch niet-BAG adres)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][3]['woonplaats']).to.eql(\"Hilversum\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "60954d88-7127-4ba7-ac31-848c9b4b1cc9",
											"key": "burgerservicenummer",
											"value": "999994669",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "verblijf buitenland",
							"event": [
								{
									"script": {
										"id": "d9350b46-5e30-47ee-b341-4ca61a4184de",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of gemeenteVanInschrijving.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.match(/^(Register Niet Ingezetenen)|(Registratie Niet Ingezetenen \\(RNI\\))$/);",
											"});",
											"",
											"pm.test(\"woonplaats Existence Match (0)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (2)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['woonplaats']).to.eql(\"Snellendam\");",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats] (3)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][2]['woonplaats']).to.eql(\"Duiven\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "382c2366-f05d-4fb0-a7f1-ef5adb010b4a",
											"key": "burgerservicenummer",
											"value": "999993483",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "vertrokkenOnbekendWaarheen",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.eql(\"'s-Gravenhage\");",
											"});",
											"",
											"pm.test(\"woonplaats Existence Match (0)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [omschrijving] (1)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['woonplaats']).to.eql(\"'s-Gravenhage\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "bd94732e-b8b8-4d85-842b-8773608ab910",
											"key": "burgerservicenummer",
											"value": "999993586",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "onbekende gemeente van inschrijving, woonplaats gevuld",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Match content of [woonplaats]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['woonplaats']).to.eql(\"Toetsoog\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['code']).to.eql(\"1810\");",
											"});",
											"",
											"pm.test(\"Check for existence of gemeenteVanInschrijving (1)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][0]['gemeenteVanInschrijving']['omschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Check for existence of gemeenteVanInschrijving (2)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['gemeenteVanInschrijving']['omschrijving']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Check for existence of woonplaats (2)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfplaatshistorie'][1]['woonplaats']).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfplaatshistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfplaatshistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ffcee3c5-260d-4cbe-ab30-828b67ba87d7",
											"key": "burgerservicenummer",
											"value": "999991723",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "917c4cb3-428b-4cb7-92e8-77c5e6b6008e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a8181c7-4836-4669-8a0c-dceb10c6f0fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "verblijfstitelhistorie",
			"item": [
				{
					"name": "mapping",
					"item": [
						{
							"name": "actuele en historische verblijfstitels",
							"event": [
								{
									"script": {
										"id": "d0c5a6f3-0e30-47e6-a399-59827769cf5a",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"aanduiding.code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']['code']).to.eql(\"27\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"aanduiding.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']['omschrijving']).to.match(/^Vw\\ 2000\\ art\\.\\ 8\\,\\ .*\\ d\\,\\ verg.*\\ asiel\\ onbep.*\\ tijd.*\\,\\ arbeid\\ vrij$/);",
											"});",
											"",
											"pm.test(\"Existence datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumEinde']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"datumIngang\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumIngang']).to.eql({   ",
											"        \"datum\" : \"2001-09-01\",   ",
											"        \"jaar\" : 2001,   ",
											"        \"maand\" : 9,   ",
											"        \"dag\" : 1});",
											"});",
											"",
											"pm.test(\"Existence inOnderzoek\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0].geheimhoudingPersoonsgegevens Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['geheimhoudingPersoonsgegevens']).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "50cc0600-f191-405d-b6fd-31f7f91371ac",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "beëindigde en meerdere historische  verblijfstitels zonder einddatum",
							"event": [
								{
									"script": {
										"id": "9660a886-5e13-40cf-9418-fa611d697362",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"aanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']).to.eql({   \"code\" : \"21\",   \"omschrijving\" : \"Vw 2000 art. 8, onder a, vergunning regulier bepaalde tijd, arbeid vrij\"});",
											"});",
											"",
											"pm.test(\"datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumEinde']).to.eql({   \"datum\" : \"2013-06-30\",   \"jaar\" : 2013,   \"maand\" : 6,   \"dag\" : 30});",
											"});",
											"",
											"pm.test(\"datumIngang\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumIngang']).to.eql({   \"datum\" : \"2008-06-30\",   \"jaar\" : 2008,   \"maand\" : 6,   \"dag\" : 30});",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "805c0af9-66f3-44e9-b7e9-e9f5d80aa8d3",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "beëindigd onderzoek",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['inOnderzoek']).to.be.an(\"undefined\");",
											"});"
										],
										"id": "f70c3a42-8319-474f-9393-0e4403c31278"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "28eb4071-20fd-4a31-9f36-4aefb0005d59",
											"key": "burgerservicenummer",
											"value": "999992399",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "indicatie geheim",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"[0].geheimhoudingPersoonsgegevens\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['geheimhoudingPersoonsgegevens']).to.eql(true);",
											"});",
											"",
											"pm.test(\"[1].geheimhoudingPersoonsgegevens\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['geheimhoudingPersoonsgegevens']).to.eql(true);",
											"});",
											""
										],
										"id": "330da75f-f1e2-493f-a901-268ff714e23e"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "9578c566-7a5f-482d-a25a-143b4611304b",
											"key": "burgerservicenummer",
											"value": "999991188",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "historie",
					"item": [
						{
							"name": "actuele en historische verblijfstitels",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].aanduiding.code).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumIngang.datum).to.eql(\"1995-11-01\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumEinde.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "fd0f2716-9d99-420b-9970-4413e6ed4693",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "historische verblijfstitels zonder einddatum",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(9);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2008-06-30\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2013-06-30\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].aanduiding.code).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumIngang.datum).to.eql(\"2007-06-15\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumEinde.datum).to.eql(\"2008-06-30\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].aanduiding.code).to.eql(\"31\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].datumIngang.datum).to.eql(\"2007-03-21\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].datumIngang.datum).to.eql(\"2006-07-31\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[4].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[4].datumIngang.datum).to.eql(\"2005-05-25\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[5].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[5].datumIngang.datum).to.eql(\"2005-03-18\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[6].aanduiding.code).to.eql(\"32\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[6].datumIngang.datum).to.eql(\"2003-01-03\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[7].aanduiding.code).to.eql(\"31\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[7].datumIngang.datum).to.eql(\"2001-06-20\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[8].aanduiding.code).to.eql(\"32\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[8].datumIngang.datum).to.eql(\"1998-07-01\");",
											"});",
											"",
											"",
											"pm.test(\"[1].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumEinde']['datum']).to.eql(\"2008-06-30\");",
											"});",
											"",
											"pm.test(\"[2].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][2]['datumEinde']['datum']).to.eql(\"2007-06-15\");",
											"});",
											"",
											"pm.test(\"[3].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][3]['datumEinde']['datum']).to.eql(\"2007-03-21\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ece8e78a-de6e-4e7e-94ea-c4994bd4a70f",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "peildatum",
					"item": [
						{
							"name": "peildatum in actuele verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"",
											"pm.test(\"datumEinde Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=2001-09-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2001-09-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "aa8e6f93-16b9-4bb3-9568-d008a7d24664",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum in actuele verblijfstitel (2)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"",
											"pm.test(\"datumEinde Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=2025-09-15",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2025-09-15",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "57861c67-3a5e-483e-a014-1be20fb4552d",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum in historische verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"1995-11-01\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=2001-08-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2001-08-31",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ec16d3ab-2edc-498a-b8bf-12769e9c52d6",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum in gecorrigeerde verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"1995-11-01\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=1995-11-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1995-11-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "55d5e9cb-236c-4a85-9ace-5880e1973249",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum voor eerste verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie).to.be.an(\"undefined\");",
											"});"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=1994-09-15",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1994-09-15",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5d81faf0-9c34-41bc-b2ce-7d7a9651f752",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum in periode",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"",
											"pm.test(\"datumEinde Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=2003-09-01&datumVan=2001-09-01&datumTotEnMet=2003-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2003-09-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "2001-09-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2003-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "6e103527-d84c-4285-b8de-1ac979e12955",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum buiten periode",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=2001-09-01&datumVan=1999-01-01&datumTotEnMet=2000-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2001-09-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "1999-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2000-01-01",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "e74368f1-370c-459f-81c7-c7bceb98df74",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "periode van en tot",
					"item": [
						{
							"name": "periode in actuele verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"",
											"pm.test(\"datumEinde Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2001-09-01&datumTotEnMet=2001-09-02",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2001-09-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2001-09-02",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "28afe8a9-5a62-443d-8ac6-e39902f2c0c3",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode in actuele verblijfstitel (2)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"",
											"pm.test(\"datumEinde Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2015-09-15&datumTotEnMet=2019-09-16",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2015-09-15",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2019-09-16",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "cfd36ba0-b302-4be9-bfd9-ed00f58cdca7",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode in historische verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"1995-11-01\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2001-08-01&datumTotEnMet=2001-08-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2001-08-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2001-08-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "0935ffe3-9112-40c4-b6d5-388a6b9e151e",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode in gecorrigeerde verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"1995-11-01\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=1995-11-01&datumTotEnMet=2000-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1995-11-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2000-01-01",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "a53a1b3f-74e9-4aaa-89a7-eeff635dc05b",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode voor eerste verblijfstitel",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=1994-03-15&datumTotEnMet=1994-09-15",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1994-03-15",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1994-09-15",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "d042cd40-d187-4bcc-a846-38d21b69218e",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode over meerdere verblijfstitels",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(4);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2007-06-15\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2008-06-30\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].aanduiding.code).to.eql(\"31\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumIngang.datum).to.eql(\"2007-03-21\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].datumIngang.datum).to.eql(\"2006-07-31\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].datumIngang.datum).to.eql(\"2005-05-25\");",
											"});",
											"",
											"",
											"pm.test(\"[1].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumEinde']['datum']).to.eql(\"2007-06-15\");",
											"});",
											"",
											"pm.test(\"[2].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][2]['datumEinde']['datum']).to.eql(\"2007-03-21\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2006-01-01&datumTotEnMet=2008-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2006-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2008-01-01",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "e096a180-54d9-42f6-9626-ba4a69d56416",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode zonder datumTotEnMet",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"[2].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][2]['datumEinde']['datum']).to.eql(\"2007-06-15\");",
											"});",
											"",
											"pm.test(\"[3].datumEinde\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][3]['datumEinde']['datum']).to.eql(\"2007-03-21\");",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2008-06-30\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumEinde.datum).to.eql(\"2013-06-30\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].aanduiding.code).to.eql(\"21\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumIngang.datum).to.eql(\"2007-06-15\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumEinde.datum).to.eql(\"2008-06-30\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].aanduiding.code).to.eql(\"31\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].datumIngang.datum).to.eql(\"2007-03-21\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].datumIngang.datum).to.eql(\"2006-07-31\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2006-08-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2006-08-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "293a6494-d6c5-4cf5-9cc1-2a626d9d64a0",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "periode zonder datumVan",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(4);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"98\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2005-03-18\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].aanduiding.code).to.eql(\"32\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumIngang.datum).to.eql(\"2003-01-03\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].aanduiding.code).to.eql(\"31\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[2].datumIngang.datum).to.eql(\"2001-06-20\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].aanduiding.code).to.eql(\"32\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[3].datumIngang.datum).to.eql(\"1998-07-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumTotEnMet=2005-05-24",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "2005-05-24",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "46512d5c-6013-429d-9a6e-2034275fa275",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumVan ligt voor datumtot",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2006-01-01&datumTotEnMet=2005-05-25",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2006-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2005-05-25",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "f782553c-93b2-4808-bd34-a9d05982cc0f",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "peildatum buiten periode",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?peildatum=1999-09-09&datumVan=2005-01-01&datumTotEnMet=2005-05-25",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1999-09-09",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "2005-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2005-05-25",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "8bcc166d-26eb-4b81-9763-59dc3a5faff3",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumTotEnMet = datumIngang",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].aanduiding.code).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumIngang.datum).to.eql(\"1995-11-01\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[1].datumEinde.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2001-08-01&datumTotEnMet=2001-09-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2001-08-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2001-09-01",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "42559fe2-b45e-401a-bbad-f76153c38a71",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "datumVan = datumIngang",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"code equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].aanduiding.code).to.eql(\"27\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.datum).to.eql(\"2001-09-01\");",
											"});",
											"",
											"pm.test(\"jaar equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.jaar).to.eql(2001);",
											"});",
											"",
											"pm.test(\"maand equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.maand).to.eql(9);",
											"});",
											"",
											"pm.test(\"dag equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].verblijfstitelhistorie[0].datumIngang.dag).to.eql(1);",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?datumVan=2001-09-01&datumTotEnMet=2001-09-30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2001-09-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2001-09-30",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "c0ecf601-2a68-4205-a2a7-3b34f4b58c26",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "fields",
					"item": [
						{
							"name": "groep en veld in groep",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"[0]['aanduiding']['code'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']['code']).to.eql(\"27\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"[0]['aanduiding']['omschrijving']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']['omschrijving']).to.match(/^Vw\\ 2000\\ art\\.\\ 8\\,\\ .*\\ d\\,\\ .*\\ asiel\\ onbep.*\\ tijd.*\\,\\ arbeid\\ vrij$/);",
											"});",
											"",
											"pm.test(\"[0]['datumIngang']['maand']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumIngang']['maand']).to.eql(9);",
											"});",
											"",
											"pm.test(\"[1]['aanduiding']['code']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['aanduiding']['code']).to.eql(\"24\");",
											"});",
											"",
											"pm.test(\"[1]['aanduiding']['omschrijving']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['aanduiding']['omschrijving']).to.eql(\"Vw 2000 art. 8, onder a, vergunning regulier bepaalde tijd, geen arbeid\");",
											"});",
											"",
											"pm.test(\"[1]['datumEinde']['datum']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumEinde']['datum']).to.eql(\"2001-09-01\");",
											"});",
											"",
											"pm.test(\"[1]['datumIngang']['maand']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumIngang']['maand']).to.eql(11);",
											"});",
											"",
											"pm.test(\"[0]['datumIngang']['datum'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumIngang']['datum']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0]['datumIngang']['jaar'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumIngang']['jaar']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1]['datumIngang']['datum'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumIngang']['datum']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1]['datumIngang']['jaar'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumIngang']['jaar']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1]['datumEinde']['jaar'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumEinde']['jaar']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/999995017/verblijfstitelhistorie?fields=aanduiding,datumIngang.maand,datumEinde.datum\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?fields=aanduiding,datumIngang.maand,datumEinde.datum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "aanduiding,datumIngang.maand,datumEinde.datum",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "89d48f64-480f-4a31-842b-b869c0d904a0",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						},
						{
							"name": "veld in aanduiding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/999995017/verblijfstitelhistorie?fields=aanduiding.omschrijving\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"[0]['aanduiding']['omschrijving']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']['omschrijving']).to.match(/^Vw\\ 2000\\ art\\.\\ 8\\,\\ .*\\ d\\,\\ .*\\ asiel\\ onbep.*\\ tijd.*\\,\\ arbeid\\ vrij$/);",
											"});",
											"",
											"pm.test(\"[1]['aanduiding']['omschrijving']\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['aanduiding']['omschrijving']).to.eql(\"Vw 2000 art. 8, onder a, vergunning regulier bepaalde tijd, geen arbeid\");",
											"});",
											"",
											"pm.test(\"[0]['datumIngang'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['datumIngang']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1]['datumIngang'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumIngang']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1]['datumEinde'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['datumEinde']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[0]['aanduiding']['code'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][0]['aanduiding']['code']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1]['aanduiding']['code'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['verblijfstitelhistorie'][1]['aanduiding']['code']).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/verblijfstitelhistorie?fields=aanduiding.omschrijving",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"verblijfstitelhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "aanduiding.omschrijving",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "23a0dacb-4219-43cc-b256-7ea6a83c1338",
											"key": "burgerservicenummer",
											"value": "999995017",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "partnerhistorie",
			"item": [
				{
					"name": "mapping",
					"item": [
						{
							"name": "huwelijk",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"burgerservicenummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.eql(\"999994037\");",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"Carolina\");",
											"});",
											"",
											"pm.test(\"voorvoegsel\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.eql(\"van der\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Hom\");",
											"});",
											"",
											"pm.test(\"naam.inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geboorte.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['datum']).to.eql({   \"datum\" : \"1955-12-12\",   \"jaar\" : 1955,   \"maand\" : 12,   \"dag\" : 12});",
											"});",
											"",
											"pm.test.skip(\"geboorte.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']).to.eql({   \"code\" : \"0344\",   \"omschrijving\" : \"Utrecht\"});",
											"});",
											"",
											"pm.test.skip(\"geboorte.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test(\"geboorte.inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geslachtsaanduiding']).to.eql(\"vrouw\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['datum']).to.eql({   \"datum\" : \"1982-05-11\",   \"jaar\" : 1982,   \"maand\" : 5,   \"dag\" : 11});",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['plaats']).to.eql({   \"code\" : \"0518\",   \"omschrijving\" : \"'s-Gravenhage\"});",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"soortVerbintenis\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['soortVerbintenis']).to.eql(\"huwelijk\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"_link.self.ingeschrevenPersoon\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['_links']['ingeschrevenPersoon']['href']).to.match(/^.*\\/haalcentraal\\/api\\/brp\\/ingeschrevenpersonen\\/999994037$/);",
											"});",
											"",
											"pm.test(\"inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											""
										],
										"id": "71349b41-a22a-4e0d-9b4a-5af3b747a139"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "3c7802b0-77b7-4701-b759-828e67e5295c",
											"key": "burgerservicenummer",
											"value": "999993422",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "partnerschap",
							"event": [
								{
									"script": {
										"id": "b4976729-c56a-4561-8e47-75ca38f7ba65",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"burgerservicenummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.eql(\"999995170\");",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"Marjolein\");",
											"});",
											"",
											"pm.test(\"Match content of [voorvoegsel]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.eql(\"de\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Goede\");",
											"});",
											"",
											"pm.test(\"naam.inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geboorte.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['datum']).to.eql({   \"datum\" : \"1990-06-07\",   \"jaar\" : 1990,   \"maand\" : 6,   \"dag\" : 7});",
											"});",
											"",
											"pm.test(\"plaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"geboorte.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']).to.eql({   ",
											"        \"code\" : \"6030\",   ",
											"        \"omschrijving\" : \"Nederland\"",
											"    });",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geslachtsaanduiding']).to.eql(\"vrouw\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['datum']).to.eql({   \"datum\" : \"2012-09-13\",   \"jaar\" : 2012,   \"maand\" : 9,   \"dag\" : 13});",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.plaats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['plaats']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.inOnderzoek Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['inOnderzoek']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"soortVerbintenis\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['soortVerbintenis']).to.eql(\"geregistreerd_partnerschap\");",
											"});",
											"",
											"pm.test.skip(\"_link.self.href\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(\"https://www.haalcentraal.nl/haalcentraal/api/brp/ingeschrevenpersonen/999991292/partnerhistorie\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"_link.ingeschrevenPersoon.href\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['_links']['ingeschrevenPersoon']['href']).to.match(/^.*\\/haalcentraal\\/api\\/brp\\/ingeschrevenpersonen\\/999995170$/);",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "02c085a6-adf4-4041-960e-d0253d27406c",
											"key": "burgerservicenummer",
											"value": "999991292",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "diakrieten",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"burgerservicenummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.eql(\"999992454\");",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"Drača\");",
											"});",
											"",
											"pm.test(\"voorvoegsel\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Bilgiç\");",
											"});",
											"",
											"pm.test(\"geboorte.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['datum']).to.eql({   \"datum\" : \"1930-05-21\",   \"jaar\" : 1930,   \"maand\" : 5,   \"dag\" : 21});",
											"});",
											"",
											"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']['omschrijving']).to.eql(\"Belgrado\");",
											"});",
											"",
											"pm.test.skip(\"geboorte.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']).to.eql({   \"code\" : \"6045\",   \"omschrijving\" : \"Joegoslavië\"});",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geslachtsaanduiding']).to.eql(\"man\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['datum']).to.eql({   \"datum\" : \"1958-06-12\",   \"jaar\" : 1958,   \"maand\" : 6,   \"dag\" : 12});",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['plaats']['omschrijving']).to.eql(\"Žepče\");",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6045\",   \"omschrijving\" : \"Joegoslavië\"});",
											"});",
											""
										],
										"id": "5d131111-b42a-40fc-9290-865079d2d3fc"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "caf149f2-be7c-4976-8d24-9c0ac5dbfc5f",
											"key": "burgerservicenummer",
											"value": "999991188",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "actuele en beëindigde relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"JSONPath Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [soortVerbintenis]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['soortVerbintenis']).to.eql(\"geregistreerd_partnerschap\");",
											"});",
											"",
											"pm.test(\"Match content of [voorvoegsel]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.eql(\"De\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['plaats']['code']).to.eql(\"0363\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['plaats']['omschrijving']).to.eql(\"Amsterdam\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['land']['code']).to.eql(\"6030\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['land']['omschrijving']).to.eql(\"Nederland\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']['code']).to.eql(\"0939\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']['omschrijving']).to.eql(\"Melick en Herkenbosch\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']['code']).to.eql(\"6030\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']['omschrijving']).to.eql(\"Nederland\");",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['_links']['ingeschrevenPersoon']['href']).to.match(/^.*\\/haalcentraal\\/api\\/brp\\/ingeschrevenpersonen\\/999994621$/);",
											"});",
											"",
											"pm.test(\"Match content of [burgerservicenummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['burgerservicenummer']).to.eql(\"999994621\");",
											"});",
											"",
											"pm.test(\"Match content of [voornamen]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voornamen']).to.eql(\"Björn\");",
											"});",
											"",
											"pm.test(\"Match content of [geslachtsnaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['geslachtsnaam']).to.eql(\"Æþelred\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['datum']['datum']).to.eql(\"1942-08-13\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['datum']['jaar']).to.eql(1942);",
											"});",
											"",
											"pm.test(\"Match content of [maand]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['datum']['maand']).to.eql(8);",
											"});",
											"",
											"pm.test(\"Match content of [dag]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['datum']['dag']).to.eql(13);",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['plaats']['omschrijving']).to.eql(\"Øygården\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['land']['code']).to.eql(\"6027\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['land']['omschrijving']).to.eql(\"Noorwegen\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [geslachtsaanduiding]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geslachtsaanduiding']).to.eql(\"man\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['datum']).to.eql(\"2008-07-06\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['jaar']).to.eql(2008);",
											"});",
											"",
											"pm.test(\"Match content of [maand]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['maand']).to.eql(7);",
											"});",
											"",
											"pm.test(\"Match content of [dag]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['dag']).to.eql(6);",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['plaats']['code']).to.eql(\"0363\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['plaats']['omschrijving']).to.eql(\"Amsterdam\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['land']['code']).to.eql(\"6030\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['land']['omschrijving']).to.eql(\"Nederland\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['reden']['code']).to.eql(\"O\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['reden']['omschrijving']).to.eql(\"Overlijden echtgenoot/geregistreerd partner\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [soortVerbintenis]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['soortVerbintenis']).to.eql(\"huwelijk\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['datum']['datum']).to.eql(\"1987-07-14\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['datum']['jaar']).to.eql(1987);",
											"});",
											"",
											"pm.test(\"Match content of [maand]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['datum']['maand']).to.eql(7);",
											"});",
											"",
											"pm.test(\"Match content of [dag]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['datum']['dag']).to.eql(14);",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['plaats']['omschrijving']).to.eql(\"Ny-Ålesund\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['land']['code']).to.eql(\"6027\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['land']['omschrijving']).to.eql(\"Noorwegen\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "c8932c2d-a6a6-4f77-a04f-c4396fb6d41f",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "niet-ingeschreven",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"burgerservicenummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"Jéan\");",
											"});",
											"",
											"pm.test(\"voorvoegsel Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Roussæx\");",
											"});",
											"",
											"pm.test(\"geboorte.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['datum']).to.eql({   \"datum\" : \"1930-01-01\",   \"jaar\" : 1930,   \"maand\" : 1,   \"dag\" : 1});",
											"});",
											"",
											"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']['omschrijving']).to.eql(\"Lille\");",
											"});",
											"",
											"pm.test.skip(\"geboorte.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']).to.eql({   \"code\" : \"5002\",   \"omschrijving\" : \"Frankrijk\"});",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geslachtsaanduiding']).to.eql(\"man\");",
											"});",
											""
										],
										"id": "e6f8430d-4cd7-466a-b7a7-f41740a79929"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ac3f32c6-c1ad-45d3-b874-1a65f1c02e1d",
											"key": "burgerservicenummer",
											"value": "999993550",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "beeindigde relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"burgerservicenummer Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"Osama\");",
											"});",
											"",
											"pm.test(\"voorletters\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorletters']).to.eql(\"O.\");",
											"});",
											"",
											"pm.test(\"voorvoegsel Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Al-Muwallad\");",
											"});",
											"",
											"pm.test(\"geboorte.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['datum']).to.eql({   \"datum\" : \"1957-03-10\",   \"jaar\" : 1957,   \"maand\" : 3,   \"dag\" : 10});",
											"});",
											"",
											"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['plaats']['omschrijving']).to.eql(\"Riyadh\");",
											"});",
											"",
											"pm.test.skip(\"geboorte.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']['land']).to.eql({   \"code\" : \"5018\",   \"omschrijving\" : \"Saoedi-Arabië\"});",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geslachtsaanduiding']).to.eql(\"man\");",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']).to.eql({   \"datum\" : {      \"datum\" : \"2000-01-15\",      \"jaar\" : 2000,      \"maand\" : 1,      \"dag\" : 15   },   \"plaats\" : {      \"code\" : \"0518\",      \"omschrijving\" : \"'s-Gravenhage\"   },   \"land\" : {      \"code\" : \"6030\",      \"omschrijving\" : \"Nederland\"   }});",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['plaats']).to.eql({   \"code\" : \"0518\",   \"omschrijving\" : \"'s-Gravenhage\"});",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']['datum']).to.eql({   \"datum\" : \"2001-11-09\",   \"jaar\" : 2001,   \"maand\" : 11,   \"dag\" : 9});",
											"});",
											"",
											"pm.test.skip(\"ontbindingHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test.skip(\"ontbindingHuwelijkPartnerschap.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']['plaats']).to.eql({   \"code\" : \"0518\",   \"omschrijving\" : \"'s-Gravenhage\"});",
											"});",
											"",
											"pm.test.skip(\"ontbindingHuwelijkPartnerschap.reden.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']['reden']).to.eql({   \"code\" : \"R\",   \"omschrijving\" : \"Rechtsvermoeden van overlijden echtgenoot/geregistreerd partner\"});",
											"});",
											"",
											"pm.test.skip(\"indicatieHuwelijkPartnerschapBeeindigd\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']['indicatieHuwelijkPartnerschapBeeindigd']).not.to.be.an(\"undefined\");",
											"});",
											""
										],
										"id": "71f6c1b2-538f-428c-90f1-74dafea4b6d8"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "deb6d6b7-7b1d-4058-bfb7-e4fe0a0734a0",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "een actuele en een beëindigde partner",
							"event": [
								{
									"script": {
										"id": "6ffe1181-2a69-4edd-8db6-a24e7e13c17d",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"burgerservicenummer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.eql(\"999992260\");",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voornamen']).to.eql(\"Erik\");",
											"});",
											"",
											"pm.test(\"voorletters\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voorletters']).to.eql(\"E.\");",
											"});",
											"",
											"pm.test(\"voorvoegsel\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voorvoegsel']).to.eql(\"van den\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['geslachtsnaam']).to.eql(\"Oever\");",
											"});",
											"",
											"pm.test(\"geboorte.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['datum']).to.eql({   \"datum\" : \"1921-10-09\",   \"jaar\" : 1921,   \"maand\" : 10,   \"dag\" : 9});",
											"});",
											"",
											"pm.test.skip(\"geboorte.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['plaats']).to.eql({   \"code\" : \"0974\",   \"omschrijving\" : \"Susteren\"});",
											"});",
											"",
											"pm.test.skip(\"geboorte.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geboorte']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['geslachtsaanduiding']).to.eql(\"man\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['datum']).to.eql({      \"datum\" : \"1965-08-12\",      \"jaar\" : 1965,      \"maand\" : 8,      \"dag\" : 12   });",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['plaats']).to.eql({   \"code\" : \"0599\",   \"omschrijving\" : \"Rotterdam\"});",
											"});",
											"",
											"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['aangaanHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']).to.eql({   \"datum\" : \"1973-08-12\",   \"jaar\" : 1973,   \"maand\" : 8,   \"dag\" : 12});",
											"});",
											"",
											"pm.test.skip(\"ontbindingHuwelijkPartnerschap.land.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['land']).to.eql({   \"code\" : \"6030\",   \"omschrijving\" : \"Nederland\"});",
											"});",
											"",
											"pm.test.skip(\"ontbindingHuwelijkPartnerschap.plaats.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['plaats']).to.eql({   \"code\" : \"0599\",   \"omschrijving\" : \"Rotterdam\"});",
											"});",
											"",
											"pm.test.skip(\"ontbindingHuwelijkPartnerschap.reden.code en omschrijving\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['reden']).to.eql({   \"code\" : \"S\",   \"omschrijving\" : \"Echtsch of huw.ontb na sch van tfl en bed/eindigen partnersch door ovk of ontb\"});",
											"});",
											"",
											"pm.test.skip(\"indicatieHuwelijkPartnerschapBeeindigd\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['indicatieHuwelijkPartnerschapBeeindigd']).not.to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"_link.ingeschrevenPersoon.href\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['_links']['ingeschrevenPersoon']['href']).to.eql(\"https://www.haalcentraal.nl/haalcentraal/api/brp/ingeschrevenpersoon/000009921\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "57484b4a-5e3d-436b-a8dc-0493cf401a2f",
											"key": "burgerservicenummer",
											"value": "999995182",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "onbekend",
							"event": [
								{
									"script": {
										"id": "6e55a4ed-281f-4460-8929-497cdd90f7dd",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"%im ;soms genaamd Kim | Jim\");",
											"});",
											"",
											"pm.test(\"voorvoegsel Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"@tenborough\");",
											"});",
											"",
											"pm.test(\"geboorte Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test.skip(\"geslachtsaanduiding\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geslachtsaanduiding']).to.eql(\"onbekend\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap Existence\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "87b4cb1c-5036-4620-9c0c-318935d092c8",
											"key": "burgerservicenummer",
											"value": "999991449",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "leegwaarden",
							"event": [
								{
									"script": {
										"id": "0a80a7dd-6cf9-4d55-bdc3-b804c2fab8e3",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jim ;ook genaamd Kim\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.geslachtsnaam).to.eql(\"@tenborough\");",
											"});",
											"",
											"pm.test(\"geboorte Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].geboorte).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"ontbindingPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "153765cc-2070-49d8-9352-75564b499fa9",
											"key": "burgerservicenummer",
											"value": "999990524",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "indicatie geheim",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"[0].geheimhoudingPersoonsgegevens\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geheimhoudingPersoonsgegevens']).to.eql(true);",
											"});"
										],
										"id": "a4e1369b-f4f4-4c96-9526-b45a02ba3e3f"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "b384863a-c23d-4270-816b-8181136368a1",
											"key": "burgerservicenummer",
											"value": "999992715",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "historie",
					"item": [
						{
							"name": "beëindigde relatie (cat 5 + 55)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"2001-11-09\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Osama\");",
											"});",
											"",
											"pm.test(\"voorletters equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voorletters).to.eql(\"O.\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.geslachtsnaam).to.eql(\"Al-Muwallad\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"2000-01-15\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "8127f3d4-f532-4409-bbd2-761c48d4e4cf",
											"key": "burgerservicenummer",
											"value": "999992806",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "actuele en beëindigde relatie (5+meerdere 55)",
							"event": [
								{
									"script": {
										"id": "1e196487-992d-458b-9c95-39f7a183186f",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Karel Maria \");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"2009-11-02\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"2008-07-06\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Björn\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1987-07-14\");",
											"});",
											"",
											"",
											"pm.test(\"JSONPath Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "366c8370-b0c7-4ab7-ab86-c4942ba76eae",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "gescheiden, hertrouwd, gescheiden en hertrouwd met eerste partner",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(3);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1977-04-18\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[2].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1964-01-27\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[2].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[2].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1944-09-19\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ba2cae02-ca2a-40cb-9eab-1433a4b38541",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "actuele en beëindigde relatie (5+meerdere 55) naamswijziging partner",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Henk\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.geslachtsnaam).to.eql(\"Vermeulen\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1974-08-08\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1973-08-12\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Erik\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.geslachtsnaam).to.eql(\"Oever\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1965-08-12\");",
											"});",
											"",
											"pm.test(\"burgerservicenummer equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].burgerservicenummer).to.eql(\"000009921\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].geboorte.datum.datum).to.eql(\"1921-10-09\");",
											"});",
											"",
											"",
											"pm.test(\"JSONPath Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "d647151b-e345-427c-8f44-0537a36f6a06",
											"key": "burgerservicenummer",
											"value": "999995182",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "actuele en beëindigde relatie (5+meerdere 55) krijgt bsn",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Paula\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1985-03-28\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1983-03-28\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Marta\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1982-03-28\");",
											"});",
											"",
											"",
											"pm.test(\"JSONPath Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "e4fd66e1-3a35-4b89-a9ef-737393db9639",
											"key": "burgerservicenummer",
											"value": "999991395",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "twee beëindigde relaties",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1986-12-01\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Marinus Anton\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1984-10-22\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1983-04-18\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Antonius Johannes Maria\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1975-11-28\");",
											"});",
											"",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "98c5cb1e-d43f-42b5-9476-1d4a4bcf1447",
											"key": "burgerservicenummer",
											"value": "999995133",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "twee beëindigde relaties (meerdere 55)",
							"event": [
								{
									"script": {
										"id": "e439f3be-4a3a-4685-9bb6-0b17b2885c16",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"// Message Content Assertions",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"2000-01-03\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Joeri\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.geslachtsnaam).to.eql(\"Lodygin\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1993-10-02\");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1983-03-28\");",
											"});",
											"",
											"pm.test(\"voornamen equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Cees\");",
											"});",
											"",
											"pm.test(\"geslachtsnaam equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.geslachtsnaam).to.eql(\"Leclercq \");",
											"});",
											"",
											"pm.test(\"datum equals\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1982-03-28\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "57003024-e8e2-4809-a135-e8afb5f77a9d",
											"key": "burgerservicenummer",
											"value": "999991905",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "peildatum",
					"item": [
						{
							"name": "peildatum in beëindigde relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1969-02-10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1969-02-10",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "230b9440-5c01-4129-ae27-cfd9ac1b84e8",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum in actuele relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1977-04-18\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=2019-09-16",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "2019-09-16",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "4233a953-2274-4e3a-bd3f-68493e45bae5",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum in eerdere beëindigde relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1944-09-19\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1964-01-27\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1964-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1964-01-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "e7ed4c14-0df0-44c2-8eae-f8a5673b362a",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum tussen relaties",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie).to.be.an(\"undefined\");",
											"});"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1973-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1973-01-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "7c31f0e8-e146-46db-be3d-a4f26097a760",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum tussen relaties (2)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie).to.be.an(\"undefined\");",
											"});"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1964-02-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1964-02-01",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "f56a2f28-c72a-4042-9974-49bf21adfe51",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum op datum aangaan huwelijk",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1964-03-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1964-03-31",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "0098bece-0dea-41a1-8522-5394dd0c7c6c",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum op datum ontbinding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie).to.be.an(\"undefined\");",
											"});"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1972-07-19",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1972-07-19",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "bb4b057d-1f58-4130-9a81-1c324b55bc38",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "peildatum op datum vóór ontbinding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?peildatum=1972-07-18",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "1972-07-18",
											"description": "De datum waarop de resource wordt opgevraagd."
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "9e40bbaa-0d24-427a-99c2-171f9b14c54f",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "periode van en tot",
					"item": [
						{
							"name": "periode in beëindigde relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1969-01-01&datumTotEnMet=1969-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1969-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1969-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "9dfab308-5fd9-4dd6-8d3b-ae4e21b6a910",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "periode in actuele relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1977-04-18\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=2018-01-01&datumTotEnMet=2018-07-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "2018-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "2018-07-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "29670587-b79f-496d-b8f9-42c8bdbd9747",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "periode in eerdere beëindigde relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1944-09-19\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1964-01-27\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1962-07-01&datumTotEnMet=1963-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1962-07-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1963-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "bb4834b3-f3c0-4bb1-af8e-0f730c82e9b9",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "periode tussen relaties",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1973-01-01&datumTotEnMet=1974-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1973-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1974-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "18aad451-405e-4264-bb07-12f075ceac54",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "periode tussen relaties (2)",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1964-02-01&datumTotEnMet=1964-02-28",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1964-02-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1964-02-28",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "59af2d1c-109e-4952-9d7b-6d7e2ceccc4a",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "periode voor en in actuele relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1977-04-18\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1975-08-01&datumTotEnMet=1977-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1975-08-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1977-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "61f15860-22fa-4314-8731-3a5b64ce6608",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "periode over beëindigde en actuele relatie",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"[0].naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"[0].aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1977-04-18\");",
											"});",
											"",
											"pm.test(\"[0].ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"[1].aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"[1].ontbindingHuwelijkPartnerschap\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1972-01-01&datumTotEnMet=1977-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1972-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1977-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "5cb8e51a-2978-4ebc-8d01-4a9b3dd84a7a",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "alleen datumTotEnMet",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1944-09-19\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1964-01-27\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumTotEnMet=1954-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "1954-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "c48021e7-a065-4a27-b8a9-459d6a8f762b",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "alleen datumVan",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"[0].naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Jacoba Magdalena\");",
											"});",
											"",
											"pm.test(\"[0].aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1977-04-18\");",
											"});",
											"",
											"pm.test(\"[0].ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"[1].naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"[1].aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"[1].ontbindingHuwelijkPartnerschap\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1972-01-01",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1972-01-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "0700eaa9-076f-4b59-be0d-07210c5b5d9f",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "datumVan op datum aangaan",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1964-03-31&datumTotEnMet=1974-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1964-03-31",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1974-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "cf414347-f19a-4803-9586-92161f22f3ee",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "datumVan op datum ontbinding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1972-07-19&datumTotEnMet=1974-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1972-07-19",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1974-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "25855e57-efc7-4960-b90f-2b91cb1b8035",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "datumVan op dag voor datum ontbinding",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1972-07-18&datumTotEnMet=1974-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1972-07-18",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1974-12-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "50bebd73-fe33-4f4e-8b9b-328d15f6e779",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "datumTotEnMet op datum aangaan",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"naam.voornamen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].naam.voornamen).to.eql(\"Arnolda Henrika\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1964-03-31\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0].ontbindingHuwelijkPartnerschap.datum.datum).to.eql(\"1972-07-19\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?datumVan=1964-02-01&datumTotEnMet=1964-03-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "1964-02-01",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd."
										},
										{
											"key": "datumTotEnMet",
											"value": "1964-03-31",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd."
										}
									],
									"variable": [
										{
											"id": "0a436c9c-4b42-4b81-b57d-fb65aac34c39",
											"key": "burgerservicenummer",
											"value": "999993926",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "fields",
					"item": [
						{
							"name": "losse velden",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partnerhistorie?fields=burgerservicenummer\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [soortVerbintenis]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['soortVerbintenis']).to.eql(\"geregistreerd_partnerschap\");",
											"});",
											"",
											"pm.test(\"Match content of [burgerservicenummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.eql(\"999992405\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [soortVerbintenis]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['soortVerbintenis']).to.eql(\"huwelijk\");",
											"});",
											"",
											"pm.test(\"Match content of [burgerservicenummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['burgerservicenummer']).to.eql(\"999994621\");",
											"});",
											"",
											"pm.test(\"naam Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geboorte Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"['_links'] Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['_links']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"['_links'] Existence Match 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['_links']).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?fields=burgerservicenummer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "burgerservicenummer",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "4c7d4a79-01ed-40f5-b0a1-2e9ef66b7d57",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "hele groep",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Match content of [href]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partnerhistorie?fields=burgerservicenummer,naam,ontbindingHuwelijkPartnerschap\");",
											"});",
											"",
											"pm.test(\"Match content of [burgerservicenummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['burgerservicenummer']).to.eql(\"999992405\");",
											"});",
											"",
											"pm.test(\"Match content of [burgerservicenummer]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['burgerservicenummer']).to.eql(\"999994621\");",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geboorte Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"soortVerbintenis Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['soortVerbintenis']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"soortVerbintenis Existence Match 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['soortVerbintenis']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [voornamen]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voornamen']).to.eql(\"Karel Maria \");",
											"});",
											"",
											"pm.test(\"Match content of [voorletters]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorletters']).to.eql(\"K.M.\");",
											"});",
											"",
											"pm.test(\"Match content of [geslachtsnaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Marchant et d'Ansembourg\");",
											"});",
											"",
											"pm.test(\"Match content of [voorvoegsel]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['voorvoegsel']).to.eql(\"De\");",
											"});",
											"",
											"pm.test(\"Match content of [datum]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['datum']).to.eql(\"2008-07-06\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['jaar']).to.eql(2008);",
											"});",
											"",
											"pm.test(\"Match content of [maand]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['maand']).to.eql(7);",
											"});",
											"",
											"pm.test(\"Match content of [dag]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['dag']).to.eql(6);",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['land']['code']).to.eql(\"6030\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['land']['omschrijving']).to.eql(\"Nederland\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['plaats']['code']).to.eql(\"0363\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['plaats']['omschrijving']).to.eql(\"Amsterdam\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['reden']['code']).to.eql(\"O\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [omschrijving]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['reden']['omschrijving']).to.eql(\"Overlijden echtgenoot/geregistreerd partner\");",
											"});",
											"",
											"pm.test(\"Match content of [voornamen]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voornamen']).to.eql(\"Björn\");",
											"});",
											"",
											"pm.test(\"Match content of [voorletters]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voorletters']).to.eql(\"B.\");",
											"});",
											"",
											"pm.test(\"Match content of [geslachtsnaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['geslachtsnaam']).to.eql(\"Æþelred\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?fields=burgerservicenummer,naam,ontbindingHuwelijkPartnerschap",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "burgerservicenummer,naam,ontbindingHuwelijkPartnerschap",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "096547ae-e8bf-4318-8472-57e88e431f96",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "velden in groep",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"aangaanHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['aangaanHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"geboorte Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['geboorte']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['ontbindingHuwelijkPartnerschap']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"soortVerbintenis Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['soortVerbintenis']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"soortVerbintenis Existence Match 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['soortVerbintenis']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"Match content of [geslachtsnaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][0]['naam']['geslachtsnaam']).to.eql(\"Marchant et d'Ansembourg\");",
											"});",
											"",
											"pm.test(\"Match content of [jaar]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['jaar']).to.eql(2008);",
											"});",
											"",
											"pm.test(\"Match content of [geslachtsnaam]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['geslachtsnaam']).to.eql(\"Æþelred\");",
											"});",
											"",
											"pm.test(\"ontbindingHuwelijkPartnerschap.datum Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['ontbindingHuwelijkPartnerschap']['datum']['datum']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"naam.voornamen Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voornamen']).to.be.an(\"undefined\");",
											"});",
											"",
											"pm.test(\"naam.voorletters Existence Match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded']['partnerhistorie'][1]['naam']['voorletters']).to.be.an(\"undefined\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?fields=naam.geslachtsnaam,ontbindingHuwelijkPartnerschap.datum.jaar",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "naam.geslachtsnaam,ontbindingHuwelijkPartnerschap.datum.jaar",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "c255dc6e-ad36-4ce8-b388-a948c3243652",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "links",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"JSONPath Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie.length).to.eql(2);",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"[0]['_links'].ingeschrevenPersoon\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[0]['_links'].ingeschrevenPersoon.href).to.match(/^.*\\/haalcentraal\\/api\\/brp\\/ingeschrevenpersonen\\/999992405$/);",
											"});",
											"",
											"// JsonPath Match with Wildcard",
											"pm.test(\"[1]['_links'].ingeschrevenPersoon\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['_embedded'].partnerhistorie[1]['_links'].ingeschrevenPersoon.href).to.match(/^.*\\/haalcentraal\\/api\\/brp\\/ingeschrevenpersonen\\/999994621$/);",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?fields=ingeschrevenPersoon",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "ingeschrevenPersoon",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "e68a3509-942b-476d-8e40-abaa7e9016ab",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "onjuiste parameter",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Match content of [type]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['type']).to.eql(\"https://docs.microsoft.com/en-us/dotnet/api/system.net.httpstatuscode?#System_Net_HttpStatusCode_BadRequest\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(400);",
											"});",
											"",
											"pm.test(\"Match content of [detail]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['detail']).to.eql(\"De foutieve parameter(s) zijn: fields.\");",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partnerhistorie?fields=burgerservicenummer,bestaatniet,geboorte.datum\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
											"});",
											"",
											"pm.test(\"Match content of [name]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"fields\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"fields\");",
											"});",
											"",
											"pm.test(\"Match content of [reason]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde niet correct: bestaatniet.\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie?fields=burgerservicenummer,bestaatniet,geboorte.datum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "burgerservicenummer,bestaatniet,geboorte.datum",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ff089f2c-5684-44b1-8726-47c9128f1fd5",
											"key": "burgerservicenummer",
											"value": "999991553",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "foutafhandeling",
					"item": [
						{
							"name": "burgerservicenummer niet gevonden",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});",
											"",
											"pm.test.skip(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(404);",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partnerhistorie\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "ed6ac4f6-3440-4459-8610-50f3b8834c12",
											"key": "burgerservicenummer",
											"value": "123456789",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "burgerservicenummer te kort",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test.skip(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Match content of [type]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['type']).to.eql(\"https://docs.microsoft.com/en-us/dotnet/api/system.net.httpstatuscode?#System_Net_HttpStatusCode_BadRequest\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(400);",
											"});",
											"",
											"pm.test(\"Match content of [detail]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['detail']).to.eql(\"De foutieve parameter(s) zijn: burgerservicenummer.\");",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partnerhistorie\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
											"});",
											"",
											"pm.test(\"Match content of [name]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"burgerservicenummer\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minLength\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [reason]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is korter dan minimale lengte 9.\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "4646f6c7-c272-475d-bda2-f80b7a92bc7b",
											"key": "burgerservicenummer",
											"value": "12345678",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						},
						{
							"name": "burgerservicenummer te lang",
							"event": [
								{
									"script": {
										"type": "text/javascript",
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// zet query parameters in variabelen",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
											"",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test.skip(\"HTTP Header Equals\", () => {",
											"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Match content of [type]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['type']).to.eql(\"https://docs.microsoft.com/en-us/dotnet/api/system.net.httpstatuscode?#System_Net_HttpStatusCode_BadRequest\");",
											"});",
											"",
											"pm.test(\"Match content of [title]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
											"});",
											"",
											"pm.test(\"Match content of [status]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['status']).to.eql(400);",
											"});",
											"",
											"pm.test(\"Match content of [detail]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['detail']).to.eql(\"De foutieve parameter(s) zijn: burgerservicenummer.\");",
											"});",
											"",
											"pm.test(\"Match content of [instance]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partnerhistorie\");",
											"});",
											"",
											"pm.test(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
											"});",
											"",
											"pm.test(\"Match content of [name]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"burgerservicenummer\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [code]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maxLength\");",
											"});",
											"",
											"pm.test.skip(\"Match content of [reason]\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is langer dan maximale lengte 9.\");",
											"});",
											""
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partnerhistorie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingeschrevenpersonen",
										":burgerservicenummer",
										"partnerhistorie"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "peildatum",
											"value": "",
											"description": "De datum waarop de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumVan",
											"value": "",
											"description": "De begindatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										},
										{
											"key": "datumTotEnMet",
											"value": "",
											"description": "De einddatum van de periode waarover de resource wordt opgevraagd.",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "776ea574-2132-4d5a-9ee9-66b120083120",
											"key": "burgerservicenummer",
											"value": "1234567890",
											"type": "string",
											"description": "Uniek persoonsnummer\n"
										}
									]
								},
								"description": "Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode.\nAls je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "RlI5nAFCOdzKcZIu2OsfwdvStf91Oh8k",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bcf9efa4-4deb-4c5a-971f-d57a5ae22acf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1e2ed9a7-7f5e-4687-a79e-32db44172d5d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1d2e25a0-884e-4079-bd77-84ae1f8a52a8",
			"key": "baseUrl",
			"value": "https://www.haalcentraal.nl/haalcentraal/api/brphistorie"
		},
		{
			"id": "65c7ce8e-294b-4748-8656-f6030bfb4dc0",
			"key": "apiKey",
			"value": null
		},
		{
			"id": "09d09f6d-a5b7-4da1-a019-4564222e79f4",
			"key": "saml",
			"value": null
		},
		{
			"id": "db36de0d-2b8d-4a04-ab7a-7e0dc2fb2f2e",
			"key": "burgerservicenummer",
			"value": ""
		},
		{
			"id": "9d9a0441-7534-489d-9e61-decfcfeaee7c",
			"key": "peildatum",
			"value": ""
		},
		{
			"id": "1a6d7086-2c27-4602-86ce-0939aa46c293",
			"key": "datumTotEnMet",
			"value": ""
		},
		{
			"id": "c71cd096-bb40-405b-be84-e4c6eb5685e1",
			"key": "datumVan",
			"value": ""
		},
		{
			"id": "597a068a-c144-450c-9855-5e6822d69fc2",
			"key": "fields",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}