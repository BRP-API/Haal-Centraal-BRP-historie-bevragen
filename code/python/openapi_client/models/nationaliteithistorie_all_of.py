# coding: utf-8

"""
    BRP historie bevragen

    API voor het zoeken en raadplegen van historische verblijfplaatsen, partners, nationaliteiten en verblijfstitels uit de BRP (inclusief de RNI).  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-historie-bevragen/tree/v1.0.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 0.0.1 (develop)
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NationaliteithistorieAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'geheimhouding_persoonsgegevens': 'bool',
        'datum_tot': 'DatumOnvolledig',
        'reden_beeindigen': 'Waardetabel',
        'indicatie_nationaliteit_beeindigd': 'bool'
    }

    attribute_map = {
        'geheimhouding_persoonsgegevens': 'geheimhoudingPersoonsgegevens',
        'datum_tot': 'datumTot',
        'reden_beeindigen': 'redenBeeindigen',
        'indicatie_nationaliteit_beeindigd': 'indicatieNationaliteitBeeindigd'
    }

    def __init__(self, geheimhouding_persoonsgegevens=None, datum_tot=None, reden_beeindigen=None, indicatie_nationaliteit_beeindigd=None, local_vars_configuration=None):  # noqa: E501
        """NationaliteithistorieAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._geheimhouding_persoonsgegevens = None
        self._datum_tot = None
        self._reden_beeindigen = None
        self._indicatie_nationaliteit_beeindigd = None
        self.discriminator = None

        if geheimhouding_persoonsgegevens is not None:
            self.geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens
        if datum_tot is not None:
            self.datum_tot = datum_tot
        if reden_beeindigen is not None:
            self.reden_beeindigen = reden_beeindigen
        if indicatie_nationaliteit_beeindigd is not None:
            self.indicatie_nationaliteit_beeindigd = indicatie_nationaliteit_beeindigd

    @property
    def geheimhouding_persoonsgegevens(self):
        """Gets the geheimhouding_persoonsgegevens of this NationaliteithistorieAllOf.  # noqa: E501

        Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen.   # noqa: E501

        :return: The geheimhouding_persoonsgegevens of this NationaliteithistorieAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._geheimhouding_persoonsgegevens

    @geheimhouding_persoonsgegevens.setter
    def geheimhouding_persoonsgegevens(self, geheimhouding_persoonsgegevens):
        """Sets the geheimhouding_persoonsgegevens of this NationaliteithistorieAllOf.

        Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen.   # noqa: E501

        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this NationaliteithistorieAllOf.  # noqa: E501
        :type: bool
        """

        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    @property
    def datum_tot(self):
        """Gets the datum_tot of this NationaliteithistorieAllOf.  # noqa: E501


        :return: The datum_tot of this NationaliteithistorieAllOf.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_tot

    @datum_tot.setter
    def datum_tot(self, datum_tot):
        """Sets the datum_tot of this NationaliteithistorieAllOf.


        :param datum_tot: The datum_tot of this NationaliteithistorieAllOf.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_tot = datum_tot

    @property
    def reden_beeindigen(self):
        """Gets the reden_beeindigen of this NationaliteithistorieAllOf.  # noqa: E501


        :return: The reden_beeindigen of this NationaliteithistorieAllOf.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._reden_beeindigen

    @reden_beeindigen.setter
    def reden_beeindigen(self, reden_beeindigen):
        """Sets the reden_beeindigen of this NationaliteithistorieAllOf.


        :param reden_beeindigen: The reden_beeindigen of this NationaliteithistorieAllOf.  # noqa: E501
        :type: Waardetabel
        """

        self._reden_beeindigen = reden_beeindigen

    @property
    def indicatie_nationaliteit_beeindigd(self):
        """Gets the indicatie_nationaliteit_beeindigd of this NationaliteithistorieAllOf.  # noqa: E501

        Geeft aan dat de nationaliteit beëindigd is.   # noqa: E501

        :return: The indicatie_nationaliteit_beeindigd of this NationaliteithistorieAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._indicatie_nationaliteit_beeindigd

    @indicatie_nationaliteit_beeindigd.setter
    def indicatie_nationaliteit_beeindigd(self, indicatie_nationaliteit_beeindigd):
        """Sets the indicatie_nationaliteit_beeindigd of this NationaliteithistorieAllOf.

        Geeft aan dat de nationaliteit beëindigd is.   # noqa: E501

        :param indicatie_nationaliteit_beeindigd: The indicatie_nationaliteit_beeindigd of this NationaliteithistorieAllOf.  # noqa: E501
        :type: bool
        """

        self._indicatie_nationaliteit_beeindigd = indicatie_nationaliteit_beeindigd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NationaliteithistorieAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NationaliteithistorieAllOf):
            return True

        return self.to_dict() != other.to_dict()
