"""
    BRP historie bevragen

    API voor het zoeken en raadplegen van historische verblijfplaatsen, partners, nationaliteiten en verblijfstitels uit de BRP (inclusief de RNI).  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-historie-bevragen/tree/v1.0.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 0.0.1 (develop)
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.bad_request_foutbericht import BadRequestFoutbericht
from openapi_client.model.foutbericht import Foutbericht
from openapi_client.model.nationaliteithistorie_hal_collectie import NationaliteithistorieHalCollectie
from openapi_client.model.partnerhistorie_hal_collectie import PartnerhistorieHalCollectie
from openapi_client.model.verblijfplaatshistorie_hal_collectie import VerblijfplaatshistorieHalCollectie
from openapi_client.model.verblijfstitelhistorie_hal_collectie import VerblijfstitelhistorieHalCollectie


class BRPHistorieBevragenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __getnationaliteithistorie(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """getnationaliteithistorie  # noqa: E501

            Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.getnationaliteithistorie(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                fields (str): Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature). [optional]
                peildatum (date): De datum waarop de resource wordt opgevraagd.. [optional]
                datum_van (date): De begindatum van de periode waarover de resource wordt opgevraagd.. [optional]
                datum_tot_en_met (date): De einddatum van de periode waarover de resource wordt opgevraagd.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NationaliteithistorieHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.getnationaliteithistorie = Endpoint(
            settings={
                'response_type': (NationaliteithistorieHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/nationaliteithistorie',
                'operation_id': 'getnationaliteithistorie',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'fields',
                    'peildatum',
                    'datum_van',
                    'datum_tot_en_met',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'fields':
                        (str,),
                    'peildatum':
                        (date,),
                    'datum_van':
                        (date,),
                    'datum_tot_en_met':
                        (date,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'fields': 'fields',
                    'peildatum': 'peildatum',
                    'datum_van': 'datumVan',
                    'datum_tot_en_met': 'datumTotEnMet',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'fields': 'query',
                    'peildatum': 'query',
                    'datum_van': 'query',
                    'datum_tot_en_met': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__getnationaliteithistorie
        )

        def __getpartnerhistorie(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """getpartnerhistorie  # noqa: E501

            Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.getpartnerhistorie(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                fields (str): Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature). [optional]
                peildatum (date): De datum waarop de resource wordt opgevraagd.. [optional]
                datum_van (date): De begindatum van de periode waarover de resource wordt opgevraagd.. [optional]
                datum_tot_en_met (date): De einddatum van de periode waarover de resource wordt opgevraagd.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PartnerhistorieHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.getpartnerhistorie = Endpoint(
            settings={
                'response_type': (PartnerhistorieHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/partnerhistorie',
                'operation_id': 'getpartnerhistorie',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'fields',
                    'peildatum',
                    'datum_van',
                    'datum_tot_en_met',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'fields':
                        (str,),
                    'peildatum':
                        (date,),
                    'datum_van':
                        (date,),
                    'datum_tot_en_met':
                        (date,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'fields': 'fields',
                    'peildatum': 'peildatum',
                    'datum_van': 'datumVan',
                    'datum_tot_en_met': 'datumTotEnMet',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'fields': 'query',
                    'peildatum': 'query',
                    'datum_van': 'query',
                    'datum_tot_en_met': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__getpartnerhistorie
        )

        def __getverblijfplaatshistorie(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """getverblijfplaatshistorie  # noqa: E501

            Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.getverblijfplaatshistorie(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                fields (str): Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature). [optional]
                peildatum (date): De datum waarop de resource wordt opgevraagd.. [optional]
                datum_van (date): De begindatum van de periode waarover de resource wordt opgevraagd.. [optional]
                datum_tot_en_met (date): De einddatum van de periode waarover de resource wordt opgevraagd.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerblijfplaatshistorieHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.getverblijfplaatshistorie = Endpoint(
            settings={
                'response_type': (VerblijfplaatshistorieHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/verblijfplaatshistorie',
                'operation_id': 'getverblijfplaatshistorie',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'fields',
                    'peildatum',
                    'datum_van',
                    'datum_tot_en_met',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'fields':
                        (str,),
                    'peildatum':
                        (date,),
                    'datum_van':
                        (date,),
                    'datum_tot_en_met':
                        (date,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'fields': 'fields',
                    'peildatum': 'peildatum',
                    'datum_van': 'datumVan',
                    'datum_tot_en_met': 'datumTotEnMet',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'fields': 'query',
                    'peildatum': 'query',
                    'datum_van': 'query',
                    'datum_tot_en_met': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__getverblijfplaatshistorie
        )

        def __getverblijfstitelhistorie(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """getverblijfstitelhistorie  # noqa: E501

            Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.getverblijfstitelhistorie(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                fields (str): Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature). [optional]
                peildatum (date): De datum waarop de resource wordt opgevraagd.. [optional]
                datum_van (date): De begindatum van de periode waarover de resource wordt opgevraagd.. [optional]
                datum_tot_en_met (date): De einddatum van de periode waarover de resource wordt opgevraagd.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerblijfstitelhistorieHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.getverblijfstitelhistorie = Endpoint(
            settings={
                'response_type': (VerblijfstitelhistorieHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/verblijfstitelhistorie',
                'operation_id': 'getverblijfstitelhistorie',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'fields',
                    'peildatum',
                    'datum_van',
                    'datum_tot_en_met',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'fields':
                        (str,),
                    'peildatum':
                        (date,),
                    'datum_van':
                        (date,),
                    'datum_tot_en_met':
                        (date,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'fields': 'fields',
                    'peildatum': 'peildatum',
                    'datum_van': 'datumVan',
                    'datum_tot_en_met': 'datumTotEnMet',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'fields': 'query',
                    'peildatum': 'query',
                    'datum_van': 'query',
                    'datum_tot_en_met': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__getverblijfstitelhistorie
        )
