/* 
 * BRP historie bevragen
 *
 * API voor het zoeken en raadplegen van historische verblijfplaatsen, partners, nationaliteiten en verblijfstitels uit de BRP (inclusief de RNI).  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-historie-bevragen/tree/v1.0.0/features) voor nadere toelichting. 
 *
 * The version of the OpenAPI document: 0.0.1 (develop)
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBRPHistorieBevragenApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>NationaliteithistorieHalCollectie</returns>
        NationaliteithistorieHalCollectie Getnationaliteithistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of NationaliteithistorieHalCollectie</returns>
        ApiResponse<NationaliteithistorieHalCollectie> GetnationaliteithistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>PartnerhistorieHalCollectie</returns>
        PartnerhistorieHalCollectie Getpartnerhistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of PartnerhistorieHalCollectie</returns>
        ApiResponse<PartnerhistorieHalCollectie> GetpartnerhistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>VerblijfplaatshistorieHalCollectie</returns>
        VerblijfplaatshistorieHalCollectie Getverblijfplaatshistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of VerblijfplaatshistorieHalCollectie</returns>
        ApiResponse<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>VerblijfstitelhistorieHalCollectie</returns>
        VerblijfstitelhistorieHalCollectie Getverblijfstitelhistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of VerblijfstitelhistorieHalCollectie</returns>
        ApiResponse<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBRPHistorieBevragenApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of NationaliteithistorieHalCollectie</returns>
        System.Threading.Tasks.Task<NationaliteithistorieHalCollectie> GetnationaliteithistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (NationaliteithistorieHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<NationaliteithistorieHalCollectie>> GetnationaliteithistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of PartnerhistorieHalCollectie</returns>
        System.Threading.Tasks.Task<PartnerhistorieHalCollectie> GetpartnerhistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (PartnerhistorieHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerhistorieHalCollectie>> GetpartnerhistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of VerblijfplaatshistorieHalCollectie</returns>
        System.Threading.Tasks.Task<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (VerblijfplaatshistorieHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerblijfplaatshistorieHalCollectie>> GetverblijfplaatshistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of VerblijfstitelhistorieHalCollectie</returns>
        System.Threading.Tasks.Task<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (VerblijfstitelhistorieHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerblijfstitelhistorieHalCollectie>> GetverblijfstitelhistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBRPHistorieBevragenApi : IBRPHistorieBevragenApiSync, IBRPHistorieBevragenApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BRPHistorieBevragenApi : IBRPHistorieBevragenApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BRPHistorieBevragenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BRPHistorieBevragenApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BRPHistorieBevragenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BRPHistorieBevragenApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BRPHistorieBevragenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BRPHistorieBevragenApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BRPHistorieBevragenApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BRPHistorieBevragenApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>NationaliteithistorieHalCollectie</returns>
        public NationaliteithistorieHalCollectie Getnationaliteithistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<NationaliteithistorieHalCollectie> localVarResponse = GetnationaliteithistorieWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of NationaliteithistorieHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< NationaliteithistorieHalCollectie > GetnationaliteithistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getnationaliteithistorie");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< NationaliteithistorieHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/nationaliteithistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getnationaliteithistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of NationaliteithistorieHalCollectie</returns>
        public async System.Threading.Tasks.Task<NationaliteithistorieHalCollectie> GetnationaliteithistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<NationaliteithistorieHalCollectie> localVarResponse = await GetnationaliteithistorieAsyncWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Zoek de nationaliteithistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle nationaliteiten van de persoon terug. De meest actuele nationaliteit staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (NationaliteithistorieHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<NationaliteithistorieHalCollectie>> GetnationaliteithistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getnationaliteithistorie");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NationaliteithistorieHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/nationaliteithistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getnationaliteithistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>PartnerhistorieHalCollectie</returns>
        public PartnerhistorieHalCollectie Getpartnerhistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<PartnerhistorieHalCollectie> localVarResponse = GetpartnerhistorieWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of PartnerhistorieHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< PartnerhistorieHalCollectie > GetpartnerhistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getpartnerhistorie");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< PartnerhistorieHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/partnerhistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getpartnerhistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of PartnerhistorieHalCollectie</returns>
        public async System.Threading.Tasks.Task<PartnerhistorieHalCollectie> GetpartnerhistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<PartnerhistorieHalCollectie> localVarResponse = await GetpartnerhistorieAsyncWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Zoek de partnerhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle partners terug waarmee een partnerschap is aangegaan of een huwelijk is gesloten. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (PartnerhistorieHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PartnerhistorieHalCollectie>> GetpartnerhistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getpartnerhistorie");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartnerhistorieHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/partnerhistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getpartnerhistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>VerblijfplaatshistorieHalCollectie</returns>
        public VerblijfplaatshistorieHalCollectie Getverblijfplaatshistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<VerblijfplaatshistorieHalCollectie> localVarResponse = GetverblijfplaatshistorieWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of VerblijfplaatshistorieHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< VerblijfplaatshistorieHalCollectie > GetverblijfplaatshistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getverblijfplaatshistorie");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< VerblijfplaatshistorieHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/verblijfplaatshistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getverblijfplaatshistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of VerblijfplaatshistorieHalCollectie</returns>
        public async System.Threading.Tasks.Task<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<VerblijfplaatshistorieHalCollectie> localVarResponse = await GetverblijfplaatshistorieAsyncWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Zoek de verblijfplaatshistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode verbleef. Als je geen peildatum of periode opgeeft, krijg je alle verblijfplaatsen terug. Het meest actuele adres staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (VerblijfplaatshistorieHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VerblijfplaatshistorieHalCollectie>> GetverblijfplaatshistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getverblijfplaatshistorie");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VerblijfplaatshistorieHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/verblijfplaatshistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getverblijfplaatshistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>VerblijfstitelhistorieHalCollectie</returns>
        public VerblijfstitelhistorieHalCollectie Getverblijfstitelhistorie (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<VerblijfstitelhistorieHalCollectie> localVarResponse = GetverblijfstitelhistorieWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>ApiResponse of VerblijfstitelhistorieHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< VerblijfstitelhistorieHalCollectie > GetverblijfstitelhistorieWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getverblijfstitelhistorie");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< VerblijfstitelhistorieHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/verblijfstitelhistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getverblijfstitelhistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of VerblijfstitelhistorieHalCollectie</returns>
        public async System.Threading.Tasks.Task<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieAsync (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
             Org.OpenAPITools.Client.ApiResponse<VerblijfstitelhistorieHalCollectie> localVarResponse = await GetverblijfstitelhistorieAsyncWithHttpInfo(burgerservicenummer, fields, peildatum, datumVan, datumTotEnMet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Zoek de verblijfstitelhistorie van een persoon op de opgegeven peildatum of binnen de opgegeven periode. Als je geen peildatum of periode opgeeft, krijg je alle verblijfstitels van de persoon terug. De meest actuele verblijfstitel staat bovenaan. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature) (optional)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumVan">De begindatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <param name="datumTotEnMet">De einddatum van de periode waarover de resource wordt opgevraagd. (optional)</param>
        /// <returns>Task of ApiResponse (VerblijfstitelhistorieHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VerblijfstitelhistorieHalCollectie>> GetverblijfstitelhistorieAsyncWithHttpInfo (string burgerservicenummer, string fields = default(string), DateTime? peildatum = default(DateTime?), DateTime? datumVan = default(DateTime?), DateTime? datumTotEnMet = default(DateTime?))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling BRPHistorieBevragenApi->Getverblijfstitelhistorie");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (peildatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "peildatum", peildatum));
            }
            if (datumVan != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumVan", datumVan));
            }
            if (datumTotEnMet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "datumTotEnMet", datumTotEnMet));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VerblijfstitelhistorieHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/verblijfstitelhistorie", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getverblijfstitelhistorie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
